package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DbTyJg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_TY_JG".
*/
public class DbTyJgDao extends AbstractDao<DbTyJg, Long> {

    public static final String TABLENAME = "DB_TY_JG";

    /**
     * Properties of entity DbTyJg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DeptId = new Property(1, int.class, "deptId", false, "DEPT_ID");
        public final static Property SexList = new Property(2, String.class, "sexList", false, "SEX_LIST");
        public final static Property NationList = new Property(3, String.class, "nationList", false, "NATION_LIST");
        public final static Property OutlookList = new Property(4, String.class, "outlookList", false, "OUTLOOK_LIST");
        public final static Property AgeList = new Property(5, String.class, "ageList", false, "AGE_LIST");
        public final static Property EducationList = new Property(6, String.class, "educationList", false, "EDUCATION_LIST");
        public final static Property MajorList = new Property(7, String.class, "majorList", false, "MAJOR_LIST");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
    }


    public DbTyJgDao(DaoConfig config) {
        super(config);
    }
    
    public DbTyJgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_TY_JG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEPT_ID\" INTEGER NOT NULL ," + // 1: deptId
                "\"SEX_LIST\" TEXT," + // 2: sexList
                "\"NATION_LIST\" TEXT," + // 3: nationList
                "\"OUTLOOK_LIST\" TEXT," + // 4: outlookList
                "\"AGE_LIST\" TEXT," + // 5: ageList
                "\"EDUCATION_LIST\" TEXT," + // 6: educationList
                "\"MAJOR_LIST\" TEXT," + // 7: majorList
                "\"TYPE\" INTEGER NOT NULL );"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_TY_JG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbTyJg entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
 
        String sexList = entity.getSexList();
        if (sexList != null) {
            stmt.bindString(3, sexList);
        }
 
        String nationList = entity.getNationList();
        if (nationList != null) {
            stmt.bindString(4, nationList);
        }
 
        String outlookList = entity.getOutlookList();
        if (outlookList != null) {
            stmt.bindString(5, outlookList);
        }
 
        String ageList = entity.getAgeList();
        if (ageList != null) {
            stmt.bindString(6, ageList);
        }
 
        String educationList = entity.getEducationList();
        if (educationList != null) {
            stmt.bindString(7, educationList);
        }
 
        String majorList = entity.getMajorList();
        if (majorList != null) {
            stmt.bindString(8, majorList);
        }
        stmt.bindLong(9, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbTyJg entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
 
        String sexList = entity.getSexList();
        if (sexList != null) {
            stmt.bindString(3, sexList);
        }
 
        String nationList = entity.getNationList();
        if (nationList != null) {
            stmt.bindString(4, nationList);
        }
 
        String outlookList = entity.getOutlookList();
        if (outlookList != null) {
            stmt.bindString(5, outlookList);
        }
 
        String ageList = entity.getAgeList();
        if (ageList != null) {
            stmt.bindString(6, ageList);
        }
 
        String educationList = entity.getEducationList();
        if (educationList != null) {
            stmt.bindString(7, educationList);
        }
 
        String majorList = entity.getMajorList();
        if (majorList != null) {
            stmt.bindString(8, majorList);
        }
        stmt.bindLong(9, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbTyJg readEntity(Cursor cursor, int offset) {
        DbTyJg entity = new DbTyJg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // deptId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sexList
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nationList
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // outlookList
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ageList
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // educationList
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // majorList
            cursor.getInt(offset + 8) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbTyJg entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptId(cursor.getInt(offset + 1));
        entity.setSexList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNationList(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOutlookList(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAgeList(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEducationList(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMajorList(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbTyJg entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbTyJg entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbTyJg entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
