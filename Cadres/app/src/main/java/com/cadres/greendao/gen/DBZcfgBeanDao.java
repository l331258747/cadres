package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBZcfgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBZCFG_BEAN".
*/
public class DBZcfgBeanDao extends AbstractDao<DBZcfgBean, Long> {

    public static final String TABLENAME = "DBZCFG_BEAN";

    /**
     * Properties of entity DBZcfgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SearchValue = new Property(1, String.class, "searchValue", false, "SEARCH_VALUE");
        public final static Property CreateBy = new Property(2, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateBy = new Property(4, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property DeptCode = new Property(7, String.class, "deptCode", false, "DEPT_CODE");
        public final static Property NoticeId = new Property(8, int.class, "noticeId", false, "NOTICE_ID");
        public final static Property NoticeTitle = new Property(9, String.class, "noticeTitle", false, "NOTICE_TITLE");
        public final static Property NoticeType = new Property(10, String.class, "noticeType", false, "NOTICE_TYPE");
        public final static Property NoticeTypeName = new Property(11, String.class, "noticeTypeName", false, "NOTICE_TYPE_NAME");
        public final static Property NoticeContent = new Property(12, String.class, "noticeContent", false, "NOTICE_CONTENT");
        public final static Property Status = new Property(13, String.class, "status", false, "STATUS");
        public final static Property StatusName = new Property(14, String.class, "statusName", false, "STATUS_NAME");
        public final static Property TitleFileUrl = new Property(15, String.class, "titleFileUrl", false, "TITLE_FILE_URL");
    }


    public DBZcfgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBZcfgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBZCFG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SEARCH_VALUE\" TEXT," + // 1: searchValue
                "\"CREATE_BY\" TEXT," + // 2: createBy
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"UPDATE_BY\" TEXT," + // 4: updateBy
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"REMARK\" TEXT," + // 6: remark
                "\"DEPT_CODE\" TEXT," + // 7: deptCode
                "\"NOTICE_ID\" INTEGER NOT NULL ," + // 8: noticeId
                "\"NOTICE_TITLE\" TEXT," + // 9: noticeTitle
                "\"NOTICE_TYPE\" TEXT," + // 10: noticeType
                "\"NOTICE_TYPE_NAME\" TEXT," + // 11: noticeTypeName
                "\"NOTICE_CONTENT\" TEXT," + // 12: noticeContent
                "\"STATUS\" TEXT," + // 13: status
                "\"STATUS_NAME\" TEXT," + // 14: statusName
                "\"TITLE_FILE_URL\" TEXT);"); // 15: titleFileUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBZCFG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBZcfgBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String searchValue = entity.getSearchValue();
        if (searchValue != null) {
            stmt.bindString(2, searchValue);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(5, updateBy);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String deptCode = entity.getDeptCode();
        if (deptCode != null) {
            stmt.bindString(8, deptCode);
        }
        stmt.bindLong(9, entity.getNoticeId());
 
        String noticeTitle = entity.getNoticeTitle();
        if (noticeTitle != null) {
            stmt.bindString(10, noticeTitle);
        }
 
        String noticeType = entity.getNoticeType();
        if (noticeType != null) {
            stmt.bindString(11, noticeType);
        }
 
        String noticeTypeName = entity.getNoticeTypeName();
        if (noticeTypeName != null) {
            stmt.bindString(12, noticeTypeName);
        }
 
        String noticeContent = entity.getNoticeContent();
        if (noticeContent != null) {
            stmt.bindString(13, noticeContent);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(14, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(15, statusName);
        }
 
        String titleFileUrl = entity.getTitleFileUrl();
        if (titleFileUrl != null) {
            stmt.bindString(16, titleFileUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBZcfgBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String searchValue = entity.getSearchValue();
        if (searchValue != null) {
            stmt.bindString(2, searchValue);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(5, updateBy);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String deptCode = entity.getDeptCode();
        if (deptCode != null) {
            stmt.bindString(8, deptCode);
        }
        stmt.bindLong(9, entity.getNoticeId());
 
        String noticeTitle = entity.getNoticeTitle();
        if (noticeTitle != null) {
            stmt.bindString(10, noticeTitle);
        }
 
        String noticeType = entity.getNoticeType();
        if (noticeType != null) {
            stmt.bindString(11, noticeType);
        }
 
        String noticeTypeName = entity.getNoticeTypeName();
        if (noticeTypeName != null) {
            stmt.bindString(12, noticeTypeName);
        }
 
        String noticeContent = entity.getNoticeContent();
        if (noticeContent != null) {
            stmt.bindString(13, noticeContent);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(14, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(15, statusName);
        }
 
        String titleFileUrl = entity.getTitleFileUrl();
        if (titleFileUrl != null) {
            stmt.bindString(16, titleFileUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBZcfgBean readEntity(Cursor cursor, int offset) {
        DBZcfgBean entity = new DBZcfgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // searchValue
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createBy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateBy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deptCode
            cursor.getInt(offset + 8), // noticeId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // noticeTitle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // noticeType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // noticeTypeName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // noticeContent
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // statusName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // titleFileUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBZcfgBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSearchValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateBy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeptCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNoticeId(cursor.getInt(offset + 8));
        entity.setNoticeTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNoticeType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNoticeTypeName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNoticeContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStatusName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTitleFileUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBZcfgBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBZcfgBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBZcfgBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
