package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGbCadreTrainListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGB_CADRE_TRAIN_LIST_BEAN".
*/
public class DBGbCadreTrainListBeanDao extends AbstractDao<DBGbCadreTrainListBean, Long> {

    public static final String TABLENAME = "DBGB_CADRE_TRAIN_LIST_BEAN";

    /**
     * Properties of entity DBGbCadreTrainListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property TrainId = new Property(1, int.class, "trainId", false, "TRAIN_ID");
        public final static Property BaseId = new Property(2, int.class, "baseId", false, "BASE_ID");
        public final static Property CadreName = new Property(3, String.class, "cadreName", false, "CADRE_NAME");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property TrainingCourse = new Property(6, String.class, "trainingCourse", false, "TRAINING_COURSE");
        public final static Property TrainLevel = new Property(7, String.class, "trainLevel", false, "TRAIN_LEVEL");
        public final static Property TrainType = new Property(8, String.class, "trainType", false, "TRAIN_TYPE");
        public final static Property TrainOrganization = new Property(9, String.class, "trainOrganization", false, "TRAIN_ORGANIZATION");
        public final static Property TrainMode = new Property(10, String.class, "trainMode", false, "TRAIN_MODE");
        public final static Property TrainContent = new Property(11, String.class, "trainContent", false, "TRAIN_CONTENT");
    }


    public DBGbCadreTrainListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBGbCadreTrainListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGB_CADRE_TRAIN_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"TRAIN_ID\" INTEGER NOT NULL ," + // 1: trainId
                "\"BASE_ID\" INTEGER NOT NULL ," + // 2: baseId
                "\"CADRE_NAME\" TEXT," + // 3: cadreName
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"TRAINING_COURSE\" TEXT," + // 6: trainingCourse
                "\"TRAIN_LEVEL\" TEXT," + // 7: trainLevel
                "\"TRAIN_TYPE\" TEXT," + // 8: trainType
                "\"TRAIN_ORGANIZATION\" TEXT," + // 9: trainOrganization
                "\"TRAIN_MODE\" TEXT," + // 10: trainMode
                "\"TRAIN_CONTENT\" TEXT);"); // 11: trainContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGB_CADRE_TRAIN_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGbCadreTrainListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getTrainId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String trainingCourse = entity.getTrainingCourse();
        if (trainingCourse != null) {
            stmt.bindString(7, trainingCourse);
        }
 
        String trainLevel = entity.getTrainLevel();
        if (trainLevel != null) {
            stmt.bindString(8, trainLevel);
        }
 
        String trainType = entity.getTrainType();
        if (trainType != null) {
            stmt.bindString(9, trainType);
        }
 
        String trainOrganization = entity.getTrainOrganization();
        if (trainOrganization != null) {
            stmt.bindString(10, trainOrganization);
        }
 
        String trainMode = entity.getTrainMode();
        if (trainMode != null) {
            stmt.bindString(11, trainMode);
        }
 
        String trainContent = entity.getTrainContent();
        if (trainContent != null) {
            stmt.bindString(12, trainContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGbCadreTrainListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getTrainId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String trainingCourse = entity.getTrainingCourse();
        if (trainingCourse != null) {
            stmt.bindString(7, trainingCourse);
        }
 
        String trainLevel = entity.getTrainLevel();
        if (trainLevel != null) {
            stmt.bindString(8, trainLevel);
        }
 
        String trainType = entity.getTrainType();
        if (trainType != null) {
            stmt.bindString(9, trainType);
        }
 
        String trainOrganization = entity.getTrainOrganization();
        if (trainOrganization != null) {
            stmt.bindString(10, trainOrganization);
        }
 
        String trainMode = entity.getTrainMode();
        if (trainMode != null) {
            stmt.bindString(11, trainMode);
        }
 
        String trainContent = entity.getTrainContent();
        if (trainContent != null) {
            stmt.bindString(12, trainContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGbCadreTrainListBean readEntity(Cursor cursor, int offset) {
        DBGbCadreTrainListBean entity = new DBGbCadreTrainListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // trainId
            cursor.getInt(offset + 2), // baseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cadreName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // trainingCourse
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // trainLevel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // trainType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // trainOrganization
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // trainMode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // trainContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGbCadreTrainListBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainId(cursor.getInt(offset + 1));
        entity.setBaseId(cursor.getInt(offset + 2));
        entity.setCadreName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTrainingCourse(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTrainLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTrainType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTrainOrganization(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTrainMode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTrainContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGbCadreTrainListBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGbCadreTrainListBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGbCadreTrainListBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
