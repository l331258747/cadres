package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBBmBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBBM_BEAN".
*/
public class DBBmBeanDao extends AbstractDao<DBBmBean, Long> {

    public static final String TABLENAME = "DBBM_BEAN";

    /**
     * Properties of entity DBBmBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DeptId = new Property(1, int.class, "deptId", false, "DEPT_ID");
        public final static Property ParentId = new Property(2, int.class, "parentId", false, "PARENT_ID");
        public final static Property DeptName = new Property(3, String.class, "deptName", false, "DEPT_NAME");
        public final static Property DzzName = new Property(4, String.class, "dzzName", false, "DZZ_NAME");
        public final static Property OrgCode = new Property(5, String.class, "orgCode", false, "ORG_CODE");
        public final static Property OrgType = new Property(6, String.class, "orgType", false, "ORG_TYPE");
        public final static Property OrgTypeName = new Property(7, String.class, "orgTypeName", false, "ORG_TYPE_NAME");
        public final static Property FinanceType = new Property(8, String.class, "financeType", false, "FINANCE_TYPE");
        public final static Property FinanceTypeName = new Property(9, String.class, "financeTypeName", false, "FINANCE_TYPE_NAME");
        public final static Property SimpleName = new Property(10, String.class, "simpleName", false, "SIMPLE_NAME");
        public final static Property OrderNum = new Property(11, int.class, "orderNum", false, "ORDER_NUM");
        public final static Property DeptType = new Property(12, String.class, "deptType", false, "DEPT_TYPE");
        public final static Property DeptTypeName = new Property(13, String.class, "deptTypeName", false, "DEPT_TYPE_NAME");
        public final static Property DelFlag = new Property(14, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property ParentName = new Property(15, String.class, "parentName", false, "PARENT_NAME");
        public final static Property Verification = new Property(16, String.class, "verification", false, "VERIFICATION");
        public final static Property Actual = new Property(17, String.class, "actual", false, "ACTUAL");
        public final static Property Overmatch = new Property(18, String.class, "overmatch", false, "OVERMATCH");
        public final static Property Mismatch = new Property(19, String.class, "mismatch", false, "MISMATCH");
        public final static Property ApprovedPosition = new Property(20, int.class, "approvedPosition", false, "APPROVED_POSITION");
        public final static Property ApprovedDeputy = new Property(21, int.class, "approvedDeputy", false, "APPROVED_DEPUTY");
        public final static Property ApprovedOther = new Property(22, int.class, "approvedOther", false, "APPROVED_OTHER");
        public final static Property ActualPosition = new Property(23, int.class, "actualPosition", false, "ACTUAL_POSITION");
        public final static Property ActualDeputy = new Property(24, int.class, "actualDeputy", false, "ACTUAL_DEPUTY");
        public final static Property ActualOther = new Property(25, int.class, "actualOther", false, "ACTUAL_OTHER");
        public final static Property OrgLevelName = new Property(26, String.class, "orgLevelName", false, "ORG_LEVEL_NAME");
        public final static Property SurpassPosition = new Property(27, int.class, "surpassPosition", false, "SURPASS_POSITION");
        public final static Property SurpassDeputy = new Property(28, int.class, "surpassDeputy", false, "SURPASS_DEPUTY");
        public final static Property SurpassOther = new Property(29, int.class, "surpassOther", false, "SURPASS_OTHER");
        public final static Property LackPosition = new Property(30, int.class, "lackPosition", false, "LACK_POSITION");
        public final static Property LackDeputy = new Property(31, int.class, "lackDeputy", false, "LACK_DEPUTY");
        public final static Property LackOther = new Property(32, int.class, "lackOther", false, "LACK_OTHER");
        public final static Property OvermatchPosition = new Property(33, String.class, "overmatchPosition", false, "OVERMATCH_POSITION");
        public final static Property OvermatchDeputy = new Property(34, String.class, "overmatchDeputy", false, "OVERMATCH_DEPUTY");
        public final static Property OvermatchOther = new Property(35, String.class, "overmatchOther", false, "OVERMATCH_OTHER");
        public final static Property MismatchPosition = new Property(36, String.class, "mismatchPosition", false, "MISMATCH_POSITION");
        public final static Property MismatchDeputy = new Property(37, String.class, "mismatchDeputy", false, "MISMATCH_DEPUTY");
        public final static Property MismatchOther = new Property(38, String.class, "mismatchOther", false, "MISMATCH_OTHER");
        public final static Property Subset = new Property(39, int.class, "subset", false, "SUBSET");
        public final static Property DefulatOrg = new Property(40, int.class, "defulatOrg", false, "DEFULAT_ORG");
        public final static Property Display = new Property(41, int.class, "display", false, "DISPLAY");
    }


    public DBBmBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBBmBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBBM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEPT_ID\" INTEGER NOT NULL ," + // 1: deptId
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 2: parentId
                "\"DEPT_NAME\" TEXT," + // 3: deptName
                "\"DZZ_NAME\" TEXT," + // 4: dzzName
                "\"ORG_CODE\" TEXT," + // 5: orgCode
                "\"ORG_TYPE\" TEXT," + // 6: orgType
                "\"ORG_TYPE_NAME\" TEXT," + // 7: orgTypeName
                "\"FINANCE_TYPE\" TEXT," + // 8: financeType
                "\"FINANCE_TYPE_NAME\" TEXT," + // 9: financeTypeName
                "\"SIMPLE_NAME\" TEXT," + // 10: simpleName
                "\"ORDER_NUM\" INTEGER NOT NULL ," + // 11: orderNum
                "\"DEPT_TYPE\" TEXT," + // 12: deptType
                "\"DEPT_TYPE_NAME\" TEXT," + // 13: deptTypeName
                "\"DEL_FLAG\" TEXT," + // 14: delFlag
                "\"PARENT_NAME\" TEXT," + // 15: parentName
                "\"VERIFICATION\" TEXT," + // 16: verification
                "\"ACTUAL\" TEXT," + // 17: actual
                "\"OVERMATCH\" TEXT," + // 18: overmatch
                "\"MISMATCH\" TEXT," + // 19: mismatch
                "\"APPROVED_POSITION\" INTEGER NOT NULL ," + // 20: approvedPosition
                "\"APPROVED_DEPUTY\" INTEGER NOT NULL ," + // 21: approvedDeputy
                "\"APPROVED_OTHER\" INTEGER NOT NULL ," + // 22: approvedOther
                "\"ACTUAL_POSITION\" INTEGER NOT NULL ," + // 23: actualPosition
                "\"ACTUAL_DEPUTY\" INTEGER NOT NULL ," + // 24: actualDeputy
                "\"ACTUAL_OTHER\" INTEGER NOT NULL ," + // 25: actualOther
                "\"ORG_LEVEL_NAME\" TEXT," + // 26: orgLevelName
                "\"SURPASS_POSITION\" INTEGER NOT NULL ," + // 27: surpassPosition
                "\"SURPASS_DEPUTY\" INTEGER NOT NULL ," + // 28: surpassDeputy
                "\"SURPASS_OTHER\" INTEGER NOT NULL ," + // 29: surpassOther
                "\"LACK_POSITION\" INTEGER NOT NULL ," + // 30: lackPosition
                "\"LACK_DEPUTY\" INTEGER NOT NULL ," + // 31: lackDeputy
                "\"LACK_OTHER\" INTEGER NOT NULL ," + // 32: lackOther
                "\"OVERMATCH_POSITION\" TEXT," + // 33: overmatchPosition
                "\"OVERMATCH_DEPUTY\" TEXT," + // 34: overmatchDeputy
                "\"OVERMATCH_OTHER\" TEXT," + // 35: overmatchOther
                "\"MISMATCH_POSITION\" TEXT," + // 36: mismatchPosition
                "\"MISMATCH_DEPUTY\" TEXT," + // 37: mismatchDeputy
                "\"MISMATCH_OTHER\" TEXT," + // 38: mismatchOther
                "\"SUBSET\" INTEGER NOT NULL ," + // 39: subset
                "\"DEFULAT_ORG\" INTEGER NOT NULL ," + // 40: defulatOrg
                "\"DISPLAY\" INTEGER NOT NULL );"); // 41: display
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBBM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBBmBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
        stmt.bindLong(3, entity.getParentId());
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(4, deptName);
        }
 
        String dzzName = entity.getDzzName();
        if (dzzName != null) {
            stmt.bindString(5, dzzName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(6, orgCode);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(7, orgType);
        }
 
        String orgTypeName = entity.getOrgTypeName();
        if (orgTypeName != null) {
            stmt.bindString(8, orgTypeName);
        }
 
        String financeType = entity.getFinanceType();
        if (financeType != null) {
            stmt.bindString(9, financeType);
        }
 
        String financeTypeName = entity.getFinanceTypeName();
        if (financeTypeName != null) {
            stmt.bindString(10, financeTypeName);
        }
 
        String simpleName = entity.getSimpleName();
        if (simpleName != null) {
            stmt.bindString(11, simpleName);
        }
        stmt.bindLong(12, entity.getOrderNum());
 
        String deptType = entity.getDeptType();
        if (deptType != null) {
            stmt.bindString(13, deptType);
        }
 
        String deptTypeName = entity.getDeptTypeName();
        if (deptTypeName != null) {
            stmt.bindString(14, deptTypeName);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(15, delFlag);
        }
 
        String parentName = entity.getParentName();
        if (parentName != null) {
            stmt.bindString(16, parentName);
        }
 
        String verification = entity.getVerification();
        if (verification != null) {
            stmt.bindString(17, verification);
        }
 
        String actual = entity.getActual();
        if (actual != null) {
            stmt.bindString(18, actual);
        }
 
        String overmatch = entity.getOvermatch();
        if (overmatch != null) {
            stmt.bindString(19, overmatch);
        }
 
        String mismatch = entity.getMismatch();
        if (mismatch != null) {
            stmt.bindString(20, mismatch);
        }
        stmt.bindLong(21, entity.getApprovedPosition());
        stmt.bindLong(22, entity.getApprovedDeputy());
        stmt.bindLong(23, entity.getApprovedOther());
        stmt.bindLong(24, entity.getActualPosition());
        stmt.bindLong(25, entity.getActualDeputy());
        stmt.bindLong(26, entity.getActualOther());
 
        String orgLevelName = entity.getOrgLevelName();
        if (orgLevelName != null) {
            stmt.bindString(27, orgLevelName);
        }
        stmt.bindLong(28, entity.getSurpassPosition());
        stmt.bindLong(29, entity.getSurpassDeputy());
        stmt.bindLong(30, entity.getSurpassOther());
        stmt.bindLong(31, entity.getLackPosition());
        stmt.bindLong(32, entity.getLackDeputy());
        stmt.bindLong(33, entity.getLackOther());
 
        String overmatchPosition = entity.getOvermatchPosition();
        if (overmatchPosition != null) {
            stmt.bindString(34, overmatchPosition);
        }
 
        String overmatchDeputy = entity.getOvermatchDeputy();
        if (overmatchDeputy != null) {
            stmt.bindString(35, overmatchDeputy);
        }
 
        String overmatchOther = entity.getOvermatchOther();
        if (overmatchOther != null) {
            stmt.bindString(36, overmatchOther);
        }
 
        String mismatchPosition = entity.getMismatchPosition();
        if (mismatchPosition != null) {
            stmt.bindString(37, mismatchPosition);
        }
 
        String mismatchDeputy = entity.getMismatchDeputy();
        if (mismatchDeputy != null) {
            stmt.bindString(38, mismatchDeputy);
        }
 
        String mismatchOther = entity.getMismatchOther();
        if (mismatchOther != null) {
            stmt.bindString(39, mismatchOther);
        }
        stmt.bindLong(40, entity.getSubset());
        stmt.bindLong(41, entity.getDefulatOrg());
        stmt.bindLong(42, entity.getDisplay());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBBmBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
        stmt.bindLong(3, entity.getParentId());
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(4, deptName);
        }
 
        String dzzName = entity.getDzzName();
        if (dzzName != null) {
            stmt.bindString(5, dzzName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(6, orgCode);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(7, orgType);
        }
 
        String orgTypeName = entity.getOrgTypeName();
        if (orgTypeName != null) {
            stmt.bindString(8, orgTypeName);
        }
 
        String financeType = entity.getFinanceType();
        if (financeType != null) {
            stmt.bindString(9, financeType);
        }
 
        String financeTypeName = entity.getFinanceTypeName();
        if (financeTypeName != null) {
            stmt.bindString(10, financeTypeName);
        }
 
        String simpleName = entity.getSimpleName();
        if (simpleName != null) {
            stmt.bindString(11, simpleName);
        }
        stmt.bindLong(12, entity.getOrderNum());
 
        String deptType = entity.getDeptType();
        if (deptType != null) {
            stmt.bindString(13, deptType);
        }
 
        String deptTypeName = entity.getDeptTypeName();
        if (deptTypeName != null) {
            stmt.bindString(14, deptTypeName);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(15, delFlag);
        }
 
        String parentName = entity.getParentName();
        if (parentName != null) {
            stmt.bindString(16, parentName);
        }
 
        String verification = entity.getVerification();
        if (verification != null) {
            stmt.bindString(17, verification);
        }
 
        String actual = entity.getActual();
        if (actual != null) {
            stmt.bindString(18, actual);
        }
 
        String overmatch = entity.getOvermatch();
        if (overmatch != null) {
            stmt.bindString(19, overmatch);
        }
 
        String mismatch = entity.getMismatch();
        if (mismatch != null) {
            stmt.bindString(20, mismatch);
        }
        stmt.bindLong(21, entity.getApprovedPosition());
        stmt.bindLong(22, entity.getApprovedDeputy());
        stmt.bindLong(23, entity.getApprovedOther());
        stmt.bindLong(24, entity.getActualPosition());
        stmt.bindLong(25, entity.getActualDeputy());
        stmt.bindLong(26, entity.getActualOther());
 
        String orgLevelName = entity.getOrgLevelName();
        if (orgLevelName != null) {
            stmt.bindString(27, orgLevelName);
        }
        stmt.bindLong(28, entity.getSurpassPosition());
        stmt.bindLong(29, entity.getSurpassDeputy());
        stmt.bindLong(30, entity.getSurpassOther());
        stmt.bindLong(31, entity.getLackPosition());
        stmt.bindLong(32, entity.getLackDeputy());
        stmt.bindLong(33, entity.getLackOther());
 
        String overmatchPosition = entity.getOvermatchPosition();
        if (overmatchPosition != null) {
            stmt.bindString(34, overmatchPosition);
        }
 
        String overmatchDeputy = entity.getOvermatchDeputy();
        if (overmatchDeputy != null) {
            stmt.bindString(35, overmatchDeputy);
        }
 
        String overmatchOther = entity.getOvermatchOther();
        if (overmatchOther != null) {
            stmt.bindString(36, overmatchOther);
        }
 
        String mismatchPosition = entity.getMismatchPosition();
        if (mismatchPosition != null) {
            stmt.bindString(37, mismatchPosition);
        }
 
        String mismatchDeputy = entity.getMismatchDeputy();
        if (mismatchDeputy != null) {
            stmt.bindString(38, mismatchDeputy);
        }
 
        String mismatchOther = entity.getMismatchOther();
        if (mismatchOther != null) {
            stmt.bindString(39, mismatchOther);
        }
        stmt.bindLong(40, entity.getSubset());
        stmt.bindLong(41, entity.getDefulatOrg());
        stmt.bindLong(42, entity.getDisplay());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBBmBean readEntity(Cursor cursor, int offset) {
        DBBmBean entity = new DBBmBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // deptId
            cursor.getInt(offset + 2), // parentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deptName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dzzName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orgCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orgType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orgTypeName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // financeType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // financeTypeName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // simpleName
            cursor.getInt(offset + 11), // orderNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deptType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // deptTypeName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // delFlag
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // parentName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // verification
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // actual
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // overmatch
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // mismatch
            cursor.getInt(offset + 20), // approvedPosition
            cursor.getInt(offset + 21), // approvedDeputy
            cursor.getInt(offset + 22), // approvedOther
            cursor.getInt(offset + 23), // actualPosition
            cursor.getInt(offset + 24), // actualDeputy
            cursor.getInt(offset + 25), // actualOther
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // orgLevelName
            cursor.getInt(offset + 27), // surpassPosition
            cursor.getInt(offset + 28), // surpassDeputy
            cursor.getInt(offset + 29), // surpassOther
            cursor.getInt(offset + 30), // lackPosition
            cursor.getInt(offset + 31), // lackDeputy
            cursor.getInt(offset + 32), // lackOther
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // overmatchPosition
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // overmatchDeputy
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // overmatchOther
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // mismatchPosition
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // mismatchDeputy
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // mismatchOther
            cursor.getInt(offset + 39), // subset
            cursor.getInt(offset + 40), // defulatOrg
            cursor.getInt(offset + 41) // display
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBBmBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptId(cursor.getInt(offset + 1));
        entity.setParentId(cursor.getInt(offset + 2));
        entity.setDeptName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDzzName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrgCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrgType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrgTypeName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFinanceType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFinanceTypeName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSimpleName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrderNum(cursor.getInt(offset + 11));
        entity.setDeptType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeptTypeName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDelFlag(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setParentName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVerification(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setActual(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOvermatch(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMismatch(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setApprovedPosition(cursor.getInt(offset + 20));
        entity.setApprovedDeputy(cursor.getInt(offset + 21));
        entity.setApprovedOther(cursor.getInt(offset + 22));
        entity.setActualPosition(cursor.getInt(offset + 23));
        entity.setActualDeputy(cursor.getInt(offset + 24));
        entity.setActualOther(cursor.getInt(offset + 25));
        entity.setOrgLevelName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSurpassPosition(cursor.getInt(offset + 27));
        entity.setSurpassDeputy(cursor.getInt(offset + 28));
        entity.setSurpassOther(cursor.getInt(offset + 29));
        entity.setLackPosition(cursor.getInt(offset + 30));
        entity.setLackDeputy(cursor.getInt(offset + 31));
        entity.setLackOther(cursor.getInt(offset + 32));
        entity.setOvermatchPosition(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setOvermatchDeputy(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setOvermatchOther(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setMismatchPosition(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setMismatchDeputy(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setMismatchOther(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setSubset(cursor.getInt(offset + 39));
        entity.setDefulatOrg(cursor.getInt(offset + 40));
        entity.setDisplay(cursor.getInt(offset + 41));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBBmBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBBmBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBBmBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
