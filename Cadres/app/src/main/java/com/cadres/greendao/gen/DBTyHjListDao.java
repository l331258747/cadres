package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBTyHjList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBTY_HJ_LIST".
*/
public class DBTyHjListDao extends AbstractDao<DBTyHjList, Long> {

    public static final String TABLENAME = "DBTY_HJ_LIST";

    /**
     * Properties of entity DBTyHjList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Scw = new Property(1, String.class, "scw", false, "SCW");
        public final static Property Szf = new Property(2, String.class, "szf", false, "SZF");
        public final static Property Srd = new Property(3, String.class, "srd", false, "SRD");
        public final static Property Szx = new Property(4, String.class, "szx", false, "SZX");
    }


    public DBTyHjListDao(DaoConfig config) {
        super(config);
    }
    
    public DBTyHjListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBTY_HJ_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SCW\" TEXT," + // 1: scw
                "\"SZF\" TEXT," + // 2: szf
                "\"SRD\" TEXT," + // 3: srd
                "\"SZX\" TEXT);"); // 4: szx
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBTY_HJ_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBTyHjList entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String scw = entity.getScw();
        if (scw != null) {
            stmt.bindString(2, scw);
        }
 
        String szf = entity.getSzf();
        if (szf != null) {
            stmt.bindString(3, szf);
        }
 
        String srd = entity.getSrd();
        if (srd != null) {
            stmt.bindString(4, srd);
        }
 
        String szx = entity.getSzx();
        if (szx != null) {
            stmt.bindString(5, szx);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBTyHjList entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String scw = entity.getScw();
        if (scw != null) {
            stmt.bindString(2, scw);
        }
 
        String szf = entity.getSzf();
        if (szf != null) {
            stmt.bindString(3, szf);
        }
 
        String srd = entity.getSrd();
        if (srd != null) {
            stmt.bindString(4, srd);
        }
 
        String szx = entity.getSzx();
        if (szx != null) {
            stmt.bindString(5, szx);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBTyHjList readEntity(Cursor cursor, int offset) {
        DBTyHjList entity = new DBTyHjList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scw
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // szf
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // srd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // szx
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBTyHjList entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScw(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSzf(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSrd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSzx(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBTyHjList entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBTyHjList entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBTyHjList entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
