package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DbTyZs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_TY_ZS".
*/
public class DbTyZsDao extends AbstractDao<DbTyZs, Long> {

    public static final String TABLENAME = "DB_TY_ZS";

    /**
     * Properties of entity DbTyZs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Deptid = new Property(1, int.class, "deptid", false, "DEPTID");
        public final static Property Overmatch = new Property(2, int.class, "overmatch", false, "OVERMATCH");
        public final static Property Parallel = new Property(3, int.class, "parallel", false, "PARALLEL");
        public final static Property Vacancy = new Property(4, int.class, "vacancy", false, "VACANCY");
        public final static Property ToVacancy = new Property(5, int.class, "toVacancy", false, "TO_VACANCY");
        public final static Property RankAgeList = new Property(6, String.class, "rankAgeList", false, "RANK_AGE_LIST");
    }


    public DbTyZsDao(DaoConfig config) {
        super(config);
    }
    
    public DbTyZsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_TY_ZS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEPTID\" INTEGER NOT NULL ," + // 1: deptid
                "\"OVERMATCH\" INTEGER NOT NULL ," + // 2: overmatch
                "\"PARALLEL\" INTEGER NOT NULL ," + // 3: parallel
                "\"VACANCY\" INTEGER NOT NULL ," + // 4: vacancy
                "\"TO_VACANCY\" INTEGER NOT NULL ," + // 5: toVacancy
                "\"RANK_AGE_LIST\" TEXT);"); // 6: rankAgeList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_TY_ZS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbTyZs entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptid());
        stmt.bindLong(3, entity.getOvermatch());
        stmt.bindLong(4, entity.getParallel());
        stmt.bindLong(5, entity.getVacancy());
        stmt.bindLong(6, entity.getToVacancy());
 
        String rankAgeList = entity.getRankAgeList();
        if (rankAgeList != null) {
            stmt.bindString(7, rankAgeList);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbTyZs entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptid());
        stmt.bindLong(3, entity.getOvermatch());
        stmt.bindLong(4, entity.getParallel());
        stmt.bindLong(5, entity.getVacancy());
        stmt.bindLong(6, entity.getToVacancy());
 
        String rankAgeList = entity.getRankAgeList();
        if (rankAgeList != null) {
            stmt.bindString(7, rankAgeList);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbTyZs readEntity(Cursor cursor, int offset) {
        DbTyZs entity = new DbTyZs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // deptid
            cursor.getInt(offset + 2), // overmatch
            cursor.getInt(offset + 3), // parallel
            cursor.getInt(offset + 4), // vacancy
            cursor.getInt(offset + 5), // toVacancy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // rankAgeList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbTyZs entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptid(cursor.getInt(offset + 1));
        entity.setOvermatch(cursor.getInt(offset + 2));
        entity.setParallel(cursor.getInt(offset + 3));
        entity.setVacancy(cursor.getInt(offset + 4));
        entity.setToVacancy(cursor.getInt(offset + 5));
        entity.setRankAgeList(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbTyZs entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbTyZs entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbTyZs entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
