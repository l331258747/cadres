package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGbCadreAwardPunishList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGB_CADRE_AWARD_PUNISH_LIST".
*/
public class DBGbCadreAwardPunishListDao extends AbstractDao<DBGbCadreAwardPunishList, Long> {

    public static final String TABLENAME = "DBGB_CADRE_AWARD_PUNISH_LIST";

    /**
     * Properties of entity DBGbCadreAwardPunishList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property AwardPunishId = new Property(1, int.class, "awardPunishId", false, "AWARD_PUNISH_ID");
        public final static Property BaseId = new Property(2, int.class, "baseId", false, "BASE_ID");
        public final static Property CadreName = new Property(3, String.class, "cadreName", false, "CADRE_NAME");
        public final static Property AwardPunishType = new Property(4, String.class, "awardPunishType", false, "AWARD_PUNISH_TYPE");
        public final static Property AwardType = new Property(5, String.class, "awardType", false, "AWARD_TYPE");
        public final static Property AwardLevel = new Property(6, String.class, "awardLevel", false, "AWARD_LEVEL");
        public final static Property PunishType = new Property(7, String.class, "punishType", false, "PUNISH_TYPE");
        public final static Property AwardPunishName = new Property(8, String.class, "awardPunishName", false, "AWARD_PUNISH_NAME");
        public final static Property RatifyTime = new Property(9, String.class, "ratifyTime", false, "RATIFY_TIME");
        public final static Property RatifyDept = new Property(10, String.class, "ratifyDept", false, "RATIFY_DEPT");
        public final static Property AwardPunishReason = new Property(11, String.class, "awardPunishReason", false, "AWARD_PUNISH_REASON");
        public final static Property AwardPunishExplain = new Property(12, String.class, "awardPunishExplain", false, "AWARD_PUNISH_EXPLAIN");
    }


    public DBGbCadreAwardPunishListDao(DaoConfig config) {
        super(config);
    }
    
    public DBGbCadreAwardPunishListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGB_CADRE_AWARD_PUNISH_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"AWARD_PUNISH_ID\" INTEGER NOT NULL ," + // 1: awardPunishId
                "\"BASE_ID\" INTEGER NOT NULL ," + // 2: baseId
                "\"CADRE_NAME\" TEXT," + // 3: cadreName
                "\"AWARD_PUNISH_TYPE\" TEXT," + // 4: awardPunishType
                "\"AWARD_TYPE\" TEXT," + // 5: awardType
                "\"AWARD_LEVEL\" TEXT," + // 6: awardLevel
                "\"PUNISH_TYPE\" TEXT," + // 7: punishType
                "\"AWARD_PUNISH_NAME\" TEXT," + // 8: awardPunishName
                "\"RATIFY_TIME\" TEXT," + // 9: ratifyTime
                "\"RATIFY_DEPT\" TEXT," + // 10: ratifyDept
                "\"AWARD_PUNISH_REASON\" TEXT," + // 11: awardPunishReason
                "\"AWARD_PUNISH_EXPLAIN\" TEXT);"); // 12: awardPunishExplain
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGB_CADRE_AWARD_PUNISH_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGbCadreAwardPunishList entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getAwardPunishId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String awardPunishType = entity.getAwardPunishType();
        if (awardPunishType != null) {
            stmt.bindString(5, awardPunishType);
        }
 
        String awardType = entity.getAwardType();
        if (awardType != null) {
            stmt.bindString(6, awardType);
        }
 
        String awardLevel = entity.getAwardLevel();
        if (awardLevel != null) {
            stmt.bindString(7, awardLevel);
        }
 
        String punishType = entity.getPunishType();
        if (punishType != null) {
            stmt.bindString(8, punishType);
        }
 
        String awardPunishName = entity.getAwardPunishName();
        if (awardPunishName != null) {
            stmt.bindString(9, awardPunishName);
        }
 
        String ratifyTime = entity.getRatifyTime();
        if (ratifyTime != null) {
            stmt.bindString(10, ratifyTime);
        }
 
        String ratifyDept = entity.getRatifyDept();
        if (ratifyDept != null) {
            stmt.bindString(11, ratifyDept);
        }
 
        String awardPunishReason = entity.getAwardPunishReason();
        if (awardPunishReason != null) {
            stmt.bindString(12, awardPunishReason);
        }
 
        String awardPunishExplain = entity.getAwardPunishExplain();
        if (awardPunishExplain != null) {
            stmt.bindString(13, awardPunishExplain);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGbCadreAwardPunishList entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getAwardPunishId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String awardPunishType = entity.getAwardPunishType();
        if (awardPunishType != null) {
            stmt.bindString(5, awardPunishType);
        }
 
        String awardType = entity.getAwardType();
        if (awardType != null) {
            stmt.bindString(6, awardType);
        }
 
        String awardLevel = entity.getAwardLevel();
        if (awardLevel != null) {
            stmt.bindString(7, awardLevel);
        }
 
        String punishType = entity.getPunishType();
        if (punishType != null) {
            stmt.bindString(8, punishType);
        }
 
        String awardPunishName = entity.getAwardPunishName();
        if (awardPunishName != null) {
            stmt.bindString(9, awardPunishName);
        }
 
        String ratifyTime = entity.getRatifyTime();
        if (ratifyTime != null) {
            stmt.bindString(10, ratifyTime);
        }
 
        String ratifyDept = entity.getRatifyDept();
        if (ratifyDept != null) {
            stmt.bindString(11, ratifyDept);
        }
 
        String awardPunishReason = entity.getAwardPunishReason();
        if (awardPunishReason != null) {
            stmt.bindString(12, awardPunishReason);
        }
 
        String awardPunishExplain = entity.getAwardPunishExplain();
        if (awardPunishExplain != null) {
            stmt.bindString(13, awardPunishExplain);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGbCadreAwardPunishList readEntity(Cursor cursor, int offset) {
        DBGbCadreAwardPunishList entity = new DBGbCadreAwardPunishList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // awardPunishId
            cursor.getInt(offset + 2), // baseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cadreName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // awardPunishType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // awardType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // awardLevel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // punishType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // awardPunishName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ratifyTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ratifyDept
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // awardPunishReason
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // awardPunishExplain
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGbCadreAwardPunishList entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAwardPunishId(cursor.getInt(offset + 1));
        entity.setBaseId(cursor.getInt(offset + 2));
        entity.setCadreName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAwardPunishType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAwardType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAwardLevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPunishType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAwardPunishName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRatifyTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRatifyDept(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAwardPunishReason(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAwardPunishExplain(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGbCadreAwardPunishList entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGbCadreAwardPunishList entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGbCadreAwardPunishList entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
