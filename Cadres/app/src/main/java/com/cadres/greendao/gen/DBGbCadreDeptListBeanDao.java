package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGbCadreDeptListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGB_CADRE_DEPT_LIST_BEAN".
*/
public class DBGbCadreDeptListBeanDao extends AbstractDao<DBGbCadreDeptListBean, Long> {

    public static final String TABLENAME = "DBGB_CADRE_DEPT_LIST_BEAN";

    /**
     * Properties of entity DBGbCadreDeptListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DeptId = new Property(1, int.class, "deptId", false, "DEPT_ID");
        public final static Property BaseId = new Property(2, int.class, "baseId", false, "BASE_ID");
        public final static Property State = new Property(3, String.class, "state", false, "STATE");
        public final static Property DeptName = new Property(4, String.class, "deptName", false, "DEPT_NAME");
        public final static Property DeptType = new Property(5, String.class, "deptType", false, "DEPT_TYPE");
        public final static Property DeptCode = new Property(6, String.class, "deptCode", false, "DEPT_CODE");
        public final static Property Ranking = new Property(7, int.class, "ranking", false, "RANKING");
    }


    public DBGbCadreDeptListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBGbCadreDeptListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGB_CADRE_DEPT_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEPT_ID\" INTEGER NOT NULL ," + // 1: deptId
                "\"BASE_ID\" INTEGER NOT NULL ," + // 2: baseId
                "\"STATE\" TEXT," + // 3: state
                "\"DEPT_NAME\" TEXT," + // 4: deptName
                "\"DEPT_TYPE\" TEXT," + // 5: deptType
                "\"DEPT_CODE\" TEXT," + // 6: deptCode
                "\"RANKING\" INTEGER NOT NULL );"); // 7: ranking
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGB_CADRE_DEPT_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGbCadreDeptListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
        stmt.bindLong(3, entity.getBaseId());
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(5, deptName);
        }
 
        String deptType = entity.getDeptType();
        if (deptType != null) {
            stmt.bindString(6, deptType);
        }
 
        String deptCode = entity.getDeptCode();
        if (deptCode != null) {
            stmt.bindString(7, deptCode);
        }
        stmt.bindLong(8, entity.getRanking());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGbCadreDeptListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
        stmt.bindLong(3, entity.getBaseId());
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(5, deptName);
        }
 
        String deptType = entity.getDeptType();
        if (deptType != null) {
            stmt.bindString(6, deptType);
        }
 
        String deptCode = entity.getDeptCode();
        if (deptCode != null) {
            stmt.bindString(7, deptCode);
        }
        stmt.bindLong(8, entity.getRanking());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGbCadreDeptListBean readEntity(Cursor cursor, int offset) {
        DBGbCadreDeptListBean entity = new DBGbCadreDeptListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // deptId
            cursor.getInt(offset + 2), // baseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deptName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deptType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deptCode
            cursor.getInt(offset + 7) // ranking
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGbCadreDeptListBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptId(cursor.getInt(offset + 1));
        entity.setBaseId(cursor.getInt(offset + 2));
        entity.setState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeptName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeptType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeptCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRanking(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGbCadreDeptListBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGbCadreDeptListBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGbCadreDeptListBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
