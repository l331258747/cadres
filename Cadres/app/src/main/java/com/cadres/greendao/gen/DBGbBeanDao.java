package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGB_BEAN".
*/
public class DBGbBeanDao extends AbstractDao<DBGbBean, Long> {

    public static final String TABLENAME = "DBGB_BEAN";

    /**
     * Properties of entity DBGbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property BaseId = new Property(1, int.class, "baseId", false, "BASE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property PhotoFileName = new Property(3, String.class, "photoFileName", false, "PHOTO_FILE_NAME");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property IdCard = new Property(5, String.class, "idCard", false, "ID_CARD");
        public final static Property Birthday = new Property(6, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Age = new Property(7, int.class, "age", false, "AGE");
        public final static Property Nation = new Property(8, String.class, "nation", false, "NATION");
        public final static Property PoliticalOutlook = new Property(9, String.class, "politicalOutlook", false, "POLITICAL_OUTLOOK");
        public final static Property JoinPartyDate = new Property(10, String.class, "joinPartyDate", false, "JOIN_PARTY_DATE");
        public final static Property NativePlace = new Property(11, String.class, "nativePlace", false, "NATIVE_PLACE");
        public final static Property Birthplace = new Property(12, String.class, "birthplace", false, "BIRTHPLACE");
        public final static Property WorkTime = new Property(13, String.class, "workTime", false, "WORK_TIME");
        public final static Property PersonnelRelationsDeptId = new Property(14, int.class, "personnelRelationsDeptId", false, "PERSONNEL_RELATIONS_DEPT_ID");
        public final static Property PersonnelRelationsDeptName = new Property(15, String.class, "personnelRelationsDeptName", false, "PERSONNEL_RELATIONS_DEPT_NAME");
        public final static Property EnterUnitTime = new Property(16, String.class, "enterUnitTime", false, "ENTER_UNIT_TIME");
        public final static Property CurrentRank = new Property(17, String.class, "currentRank", false, "CURRENT_RANK");
        public final static Property CurrentRankTime = new Property(18, String.class, "currentRankTime", false, "CURRENT_RANK_TIME");
        public final static Property Health = new Property(19, String.class, "health", false, "HEALTH");
        public final static Property FunctionaryRankId = new Property(20, int.class, "functionaryRankId", false, "FUNCTIONARY_RANK_ID");
        public final static Property FunctionaryRankName = new Property(21, String.class, "functionaryRankName", false, "FUNCTIONARY_RANK_NAME");
        public final static Property FunctionaryRankTime = new Property(22, String.class, "functionaryRankTime", false, "FUNCTIONARY_RANK_TIME");
        public final static Property CadreType = new Property(23, String.class, "cadreType", false, "CADRE_TYPE");
        public final static Property CurrentPosition = new Property(24, String.class, "currentPosition", false, "CURRENT_POSITION");
        public final static Property CurrentPositionTime = new Property(25, String.class, "currentPositionTime", false, "CURRENT_POSITION_TIME");
        public final static Property PersonnelType = new Property(26, String.class, "personnelType", false, "PERSONNEL_TYPE");
        public final static Property TechnicalTitle = new Property(27, String.class, "technicalTitle", false, "TECHNICAL_TITLE");
        public final static Property Expertise = new Property(28, String.class, "expertise", false, "EXPERTISE");
        public final static Property FullTimeEducation = new Property(29, String.class, "fullTimeEducation", false, "FULL_TIME_EDUCATION");
        public final static Property FullTimeSchool = new Property(30, String.class, "fullTimeSchool", false, "FULL_TIME_SCHOOL");
        public final static Property FullTimeDegreeId = new Property(31, int.class, "fullTimeDegreeId", false, "FULL_TIME_DEGREE_ID");
        public final static Property FullTimeDegreeName = new Property(32, String.class, "fullTimeDegreeName", false, "FULL_TIME_DEGREE_NAME");
        public final static Property FullTimeSchoolType = new Property(33, String.class, "fullTimeSchoolType", false, "FULL_TIME_SCHOOL_TYPE");
        public final static Property CurrentEducation = new Property(34, String.class, "currentEducation", false, "CURRENT_EDUCATION");
        public final static Property CurrentDegreeId = new Property(35, int.class, "currentDegreeId", false, "CURRENT_DEGREE_ID");
        public final static Property CurrentDegreeName = new Property(36, String.class, "currentDegreeName", false, "CURRENT_DEGREE_NAME");
        public final static Property CurrentSchool = new Property(37, String.class, "currentSchool", false, "CURRENT_SCHOOL");
        public final static Property CurrentSchoolType = new Property(38, String.class, "currentSchoolType", false, "CURRENT_SCHOOL_TYPE");
        public final static Property WorkPhone = new Property(39, String.class, "workPhone", false, "WORK_PHONE");
        public final static Property PhoneNumber = new Property(40, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property HomeAddress = new Property(41, String.class, "homeAddress", false, "HOME_ADDRESS");
        public final static Property Responsibilities = new Property(42, String.class, "responsibilities", false, "RESPONSIBILITIES");
        public final static Property AffectedState = new Property(43, String.class, "affectedState", false, "AFFECTED_STATE");
        public final static Property FullTimeMajor = new Property(44, String.class, "fullTimeMajor", false, "FULL_TIME_MAJOR");
        public final static Property CurrentMajor = new Property(45, String.class, "currentMajor", false, "CURRENT_MAJOR");
    }


    public DBGbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBGbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BASE_ID\" INTEGER NOT NULL ," + // 1: baseId
                "\"NAME\" TEXT," + // 2: name
                "\"PHOTO_FILE_NAME\" TEXT," + // 3: photoFileName
                "\"GENDER\" TEXT," + // 4: gender
                "\"ID_CARD\" TEXT," + // 5: idCard
                "\"BIRTHDAY\" TEXT," + // 6: birthday
                "\"AGE\" INTEGER NOT NULL ," + // 7: age
                "\"NATION\" TEXT," + // 8: nation
                "\"POLITICAL_OUTLOOK\" TEXT," + // 9: politicalOutlook
                "\"JOIN_PARTY_DATE\" TEXT," + // 10: joinPartyDate
                "\"NATIVE_PLACE\" TEXT," + // 11: nativePlace
                "\"BIRTHPLACE\" TEXT," + // 12: birthplace
                "\"WORK_TIME\" TEXT," + // 13: workTime
                "\"PERSONNEL_RELATIONS_DEPT_ID\" INTEGER NOT NULL ," + // 14: personnelRelationsDeptId
                "\"PERSONNEL_RELATIONS_DEPT_NAME\" TEXT," + // 15: personnelRelationsDeptName
                "\"ENTER_UNIT_TIME\" TEXT," + // 16: enterUnitTime
                "\"CURRENT_RANK\" TEXT," + // 17: currentRank
                "\"CURRENT_RANK_TIME\" TEXT," + // 18: currentRankTime
                "\"HEALTH\" TEXT," + // 19: health
                "\"FUNCTIONARY_RANK_ID\" INTEGER NOT NULL ," + // 20: functionaryRankId
                "\"FUNCTIONARY_RANK_NAME\" TEXT," + // 21: functionaryRankName
                "\"FUNCTIONARY_RANK_TIME\" TEXT," + // 22: functionaryRankTime
                "\"CADRE_TYPE\" TEXT," + // 23: cadreType
                "\"CURRENT_POSITION\" TEXT," + // 24: currentPosition
                "\"CURRENT_POSITION_TIME\" TEXT," + // 25: currentPositionTime
                "\"PERSONNEL_TYPE\" TEXT," + // 26: personnelType
                "\"TECHNICAL_TITLE\" TEXT," + // 27: technicalTitle
                "\"EXPERTISE\" TEXT," + // 28: expertise
                "\"FULL_TIME_EDUCATION\" TEXT," + // 29: fullTimeEducation
                "\"FULL_TIME_SCHOOL\" TEXT," + // 30: fullTimeSchool
                "\"FULL_TIME_DEGREE_ID\" INTEGER NOT NULL ," + // 31: fullTimeDegreeId
                "\"FULL_TIME_DEGREE_NAME\" TEXT," + // 32: fullTimeDegreeName
                "\"FULL_TIME_SCHOOL_TYPE\" TEXT," + // 33: fullTimeSchoolType
                "\"CURRENT_EDUCATION\" TEXT," + // 34: currentEducation
                "\"CURRENT_DEGREE_ID\" INTEGER NOT NULL ," + // 35: currentDegreeId
                "\"CURRENT_DEGREE_NAME\" TEXT," + // 36: currentDegreeName
                "\"CURRENT_SCHOOL\" TEXT," + // 37: currentSchool
                "\"CURRENT_SCHOOL_TYPE\" TEXT," + // 38: currentSchoolType
                "\"WORK_PHONE\" TEXT," + // 39: workPhone
                "\"PHONE_NUMBER\" TEXT," + // 40: phoneNumber
                "\"HOME_ADDRESS\" TEXT," + // 41: homeAddress
                "\"RESPONSIBILITIES\" TEXT," + // 42: responsibilities
                "\"AFFECTED_STATE\" TEXT," + // 43: affectedState
                "\"FULL_TIME_MAJOR\" TEXT," + // 44: fullTimeMajor
                "\"CURRENT_MAJOR\" TEXT);"); // 45: currentMajor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGbBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getBaseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String photoFileName = entity.getPhotoFileName();
        if (photoFileName != null) {
            stmt.bindString(4, photoFileName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(6, idCard);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(7, birthday);
        }
        stmt.bindLong(8, entity.getAge());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(9, nation);
        }
 
        String politicalOutlook = entity.getPoliticalOutlook();
        if (politicalOutlook != null) {
            stmt.bindString(10, politicalOutlook);
        }
 
        String joinPartyDate = entity.getJoinPartyDate();
        if (joinPartyDate != null) {
            stmt.bindString(11, joinPartyDate);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(12, nativePlace);
        }
 
        String birthplace = entity.getBirthplace();
        if (birthplace != null) {
            stmt.bindString(13, birthplace);
        }
 
        String workTime = entity.getWorkTime();
        if (workTime != null) {
            stmt.bindString(14, workTime);
        }
        stmt.bindLong(15, entity.getPersonnelRelationsDeptId());
 
        String personnelRelationsDeptName = entity.getPersonnelRelationsDeptName();
        if (personnelRelationsDeptName != null) {
            stmt.bindString(16, personnelRelationsDeptName);
        }
 
        String enterUnitTime = entity.getEnterUnitTime();
        if (enterUnitTime != null) {
            stmt.bindString(17, enterUnitTime);
        }
 
        String currentRank = entity.getCurrentRank();
        if (currentRank != null) {
            stmt.bindString(18, currentRank);
        }
 
        String currentRankTime = entity.getCurrentRankTime();
        if (currentRankTime != null) {
            stmt.bindString(19, currentRankTime);
        }
 
        String health = entity.getHealth();
        if (health != null) {
            stmt.bindString(20, health);
        }
        stmt.bindLong(21, entity.getFunctionaryRankId());
 
        String functionaryRankName = entity.getFunctionaryRankName();
        if (functionaryRankName != null) {
            stmt.bindString(22, functionaryRankName);
        }
 
        String functionaryRankTime = entity.getFunctionaryRankTime();
        if (functionaryRankTime != null) {
            stmt.bindString(23, functionaryRankTime);
        }
 
        String cadreType = entity.getCadreType();
        if (cadreType != null) {
            stmt.bindString(24, cadreType);
        }
 
        String currentPosition = entity.getCurrentPosition();
        if (currentPosition != null) {
            stmt.bindString(25, currentPosition);
        }
 
        String currentPositionTime = entity.getCurrentPositionTime();
        if (currentPositionTime != null) {
            stmt.bindString(26, currentPositionTime);
        }
 
        String personnelType = entity.getPersonnelType();
        if (personnelType != null) {
            stmt.bindString(27, personnelType);
        }
 
        String technicalTitle = entity.getTechnicalTitle();
        if (technicalTitle != null) {
            stmt.bindString(28, technicalTitle);
        }
 
        String expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(29, expertise);
        }
 
        String fullTimeEducation = entity.getFullTimeEducation();
        if (fullTimeEducation != null) {
            stmt.bindString(30, fullTimeEducation);
        }
 
        String fullTimeSchool = entity.getFullTimeSchool();
        if (fullTimeSchool != null) {
            stmt.bindString(31, fullTimeSchool);
        }
        stmt.bindLong(32, entity.getFullTimeDegreeId());
 
        String fullTimeDegreeName = entity.getFullTimeDegreeName();
        if (fullTimeDegreeName != null) {
            stmt.bindString(33, fullTimeDegreeName);
        }
 
        String fullTimeSchoolType = entity.getFullTimeSchoolType();
        if (fullTimeSchoolType != null) {
            stmt.bindString(34, fullTimeSchoolType);
        }
 
        String currentEducation = entity.getCurrentEducation();
        if (currentEducation != null) {
            stmt.bindString(35, currentEducation);
        }
        stmt.bindLong(36, entity.getCurrentDegreeId());
 
        String currentDegreeName = entity.getCurrentDegreeName();
        if (currentDegreeName != null) {
            stmt.bindString(37, currentDegreeName);
        }
 
        String currentSchool = entity.getCurrentSchool();
        if (currentSchool != null) {
            stmt.bindString(38, currentSchool);
        }
 
        String currentSchoolType = entity.getCurrentSchoolType();
        if (currentSchoolType != null) {
            stmt.bindString(39, currentSchoolType);
        }
 
        String workPhone = entity.getWorkPhone();
        if (workPhone != null) {
            stmt.bindString(40, workPhone);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(41, phoneNumber);
        }
 
        String homeAddress = entity.getHomeAddress();
        if (homeAddress != null) {
            stmt.bindString(42, homeAddress);
        }
 
        String responsibilities = entity.getResponsibilities();
        if (responsibilities != null) {
            stmt.bindString(43, responsibilities);
        }
 
        String affectedState = entity.getAffectedState();
        if (affectedState != null) {
            stmt.bindString(44, affectedState);
        }
 
        String fullTimeMajor = entity.getFullTimeMajor();
        if (fullTimeMajor != null) {
            stmt.bindString(45, fullTimeMajor);
        }
 
        String currentMajor = entity.getCurrentMajor();
        if (currentMajor != null) {
            stmt.bindString(46, currentMajor);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGbBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getBaseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String photoFileName = entity.getPhotoFileName();
        if (photoFileName != null) {
            stmt.bindString(4, photoFileName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(6, idCard);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(7, birthday);
        }
        stmt.bindLong(8, entity.getAge());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(9, nation);
        }
 
        String politicalOutlook = entity.getPoliticalOutlook();
        if (politicalOutlook != null) {
            stmt.bindString(10, politicalOutlook);
        }
 
        String joinPartyDate = entity.getJoinPartyDate();
        if (joinPartyDate != null) {
            stmt.bindString(11, joinPartyDate);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(12, nativePlace);
        }
 
        String birthplace = entity.getBirthplace();
        if (birthplace != null) {
            stmt.bindString(13, birthplace);
        }
 
        String workTime = entity.getWorkTime();
        if (workTime != null) {
            stmt.bindString(14, workTime);
        }
        stmt.bindLong(15, entity.getPersonnelRelationsDeptId());
 
        String personnelRelationsDeptName = entity.getPersonnelRelationsDeptName();
        if (personnelRelationsDeptName != null) {
            stmt.bindString(16, personnelRelationsDeptName);
        }
 
        String enterUnitTime = entity.getEnterUnitTime();
        if (enterUnitTime != null) {
            stmt.bindString(17, enterUnitTime);
        }
 
        String currentRank = entity.getCurrentRank();
        if (currentRank != null) {
            stmt.bindString(18, currentRank);
        }
 
        String currentRankTime = entity.getCurrentRankTime();
        if (currentRankTime != null) {
            stmt.bindString(19, currentRankTime);
        }
 
        String health = entity.getHealth();
        if (health != null) {
            stmt.bindString(20, health);
        }
        stmt.bindLong(21, entity.getFunctionaryRankId());
 
        String functionaryRankName = entity.getFunctionaryRankName();
        if (functionaryRankName != null) {
            stmt.bindString(22, functionaryRankName);
        }
 
        String functionaryRankTime = entity.getFunctionaryRankTime();
        if (functionaryRankTime != null) {
            stmt.bindString(23, functionaryRankTime);
        }
 
        String cadreType = entity.getCadreType();
        if (cadreType != null) {
            stmt.bindString(24, cadreType);
        }
 
        String currentPosition = entity.getCurrentPosition();
        if (currentPosition != null) {
            stmt.bindString(25, currentPosition);
        }
 
        String currentPositionTime = entity.getCurrentPositionTime();
        if (currentPositionTime != null) {
            stmt.bindString(26, currentPositionTime);
        }
 
        String personnelType = entity.getPersonnelType();
        if (personnelType != null) {
            stmt.bindString(27, personnelType);
        }
 
        String technicalTitle = entity.getTechnicalTitle();
        if (technicalTitle != null) {
            stmt.bindString(28, technicalTitle);
        }
 
        String expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(29, expertise);
        }
 
        String fullTimeEducation = entity.getFullTimeEducation();
        if (fullTimeEducation != null) {
            stmt.bindString(30, fullTimeEducation);
        }
 
        String fullTimeSchool = entity.getFullTimeSchool();
        if (fullTimeSchool != null) {
            stmt.bindString(31, fullTimeSchool);
        }
        stmt.bindLong(32, entity.getFullTimeDegreeId());
 
        String fullTimeDegreeName = entity.getFullTimeDegreeName();
        if (fullTimeDegreeName != null) {
            stmt.bindString(33, fullTimeDegreeName);
        }
 
        String fullTimeSchoolType = entity.getFullTimeSchoolType();
        if (fullTimeSchoolType != null) {
            stmt.bindString(34, fullTimeSchoolType);
        }
 
        String currentEducation = entity.getCurrentEducation();
        if (currentEducation != null) {
            stmt.bindString(35, currentEducation);
        }
        stmt.bindLong(36, entity.getCurrentDegreeId());
 
        String currentDegreeName = entity.getCurrentDegreeName();
        if (currentDegreeName != null) {
            stmt.bindString(37, currentDegreeName);
        }
 
        String currentSchool = entity.getCurrentSchool();
        if (currentSchool != null) {
            stmt.bindString(38, currentSchool);
        }
 
        String currentSchoolType = entity.getCurrentSchoolType();
        if (currentSchoolType != null) {
            stmt.bindString(39, currentSchoolType);
        }
 
        String workPhone = entity.getWorkPhone();
        if (workPhone != null) {
            stmt.bindString(40, workPhone);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(41, phoneNumber);
        }
 
        String homeAddress = entity.getHomeAddress();
        if (homeAddress != null) {
            stmt.bindString(42, homeAddress);
        }
 
        String responsibilities = entity.getResponsibilities();
        if (responsibilities != null) {
            stmt.bindString(43, responsibilities);
        }
 
        String affectedState = entity.getAffectedState();
        if (affectedState != null) {
            stmt.bindString(44, affectedState);
        }
 
        String fullTimeMajor = entity.getFullTimeMajor();
        if (fullTimeMajor != null) {
            stmt.bindString(45, fullTimeMajor);
        }
 
        String currentMajor = entity.getCurrentMajor();
        if (currentMajor != null) {
            stmt.bindString(46, currentMajor);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGbBean readEntity(Cursor cursor, int offset) {
        DBGbBean entity = new DBGbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // baseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photoFileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idCard
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthday
            cursor.getInt(offset + 7), // age
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nation
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // politicalOutlook
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // joinPartyDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nativePlace
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // birthplace
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // workTime
            cursor.getInt(offset + 14), // personnelRelationsDeptId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // personnelRelationsDeptName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // enterUnitTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // currentRank
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // currentRankTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // health
            cursor.getInt(offset + 20), // functionaryRankId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // functionaryRankName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // functionaryRankTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // cadreType
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // currentPosition
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // currentPositionTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // personnelType
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // technicalTitle
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // expertise
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // fullTimeEducation
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // fullTimeSchool
            cursor.getInt(offset + 31), // fullTimeDegreeId
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // fullTimeDegreeName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // fullTimeSchoolType
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // currentEducation
            cursor.getInt(offset + 35), // currentDegreeId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // currentDegreeName
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // currentSchool
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // currentSchoolType
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // workPhone
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // phoneNumber
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // homeAddress
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // responsibilities
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // affectedState
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // fullTimeMajor
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45) // currentMajor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGbBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaseId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhotoFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdCard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAge(cursor.getInt(offset + 7));
        entity.setNation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPoliticalOutlook(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJoinPartyDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNativePlace(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBirthplace(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWorkTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPersonnelRelationsDeptId(cursor.getInt(offset + 14));
        entity.setPersonnelRelationsDeptName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEnterUnitTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCurrentRank(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCurrentRankTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHealth(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFunctionaryRankId(cursor.getInt(offset + 20));
        entity.setFunctionaryRankName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFunctionaryRankTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCadreType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCurrentPosition(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCurrentPositionTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPersonnelType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTechnicalTitle(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setExpertise(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setFullTimeEducation(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setFullTimeSchool(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFullTimeDegreeId(cursor.getInt(offset + 31));
        entity.setFullTimeDegreeName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setFullTimeSchoolType(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCurrentEducation(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setCurrentDegreeId(cursor.getInt(offset + 35));
        entity.setCurrentDegreeName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setCurrentSchool(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setCurrentSchoolType(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setWorkPhone(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setPhoneNumber(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setHomeAddress(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setResponsibilities(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setAffectedState(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setFullTimeMajor(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCurrentMajor(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGbBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGbBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGbBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
