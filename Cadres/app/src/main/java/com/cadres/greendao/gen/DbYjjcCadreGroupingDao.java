package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DbYjjcCadreGrouping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_YJJC_CADRE_GROUPING".
*/
public class DbYjjcCadreGroupingDao extends AbstractDao<DbYjjcCadreGrouping, Long> {

    public static final String TABLENAME = "DB_YJJC_CADRE_GROUPING";

    /**
     * Properties of entity DbYjjcCadreGrouping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property GroupingId = new Property(1, int.class, "groupingId", false, "GROUPING_ID");
        public final static Property SchemeId = new Property(2, int.class, "schemeId", false, "SCHEME_ID");
        public final static Property GroupingName = new Property(3, String.class, "groupingName", false, "GROUPING_NAME");
        public final static Property GroupingRanking = new Property(4, int.class, "groupingRanking", false, "GROUPING_RANKING");
    }


    public DbYjjcCadreGroupingDao(DaoConfig config) {
        super(config);
    }
    
    public DbYjjcCadreGroupingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_YJJC_CADRE_GROUPING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"GROUPING_ID\" INTEGER NOT NULL ," + // 1: groupingId
                "\"SCHEME_ID\" INTEGER NOT NULL ," + // 2: schemeId
                "\"GROUPING_NAME\" TEXT," + // 3: groupingName
                "\"GROUPING_RANKING\" INTEGER NOT NULL );"); // 4: groupingRanking
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_YJJC_CADRE_GROUPING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbYjjcCadreGrouping entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getGroupingId());
        stmt.bindLong(3, entity.getSchemeId());
 
        String groupingName = entity.getGroupingName();
        if (groupingName != null) {
            stmt.bindString(4, groupingName);
        }
        stmt.bindLong(5, entity.getGroupingRanking());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbYjjcCadreGrouping entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getGroupingId());
        stmt.bindLong(3, entity.getSchemeId());
 
        String groupingName = entity.getGroupingName();
        if (groupingName != null) {
            stmt.bindString(4, groupingName);
        }
        stmt.bindLong(5, entity.getGroupingRanking());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbYjjcCadreGrouping readEntity(Cursor cursor, int offset) {
        DbYjjcCadreGrouping entity = new DbYjjcCadreGrouping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // groupingId
            cursor.getInt(offset + 2), // schemeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupingName
            cursor.getInt(offset + 4) // groupingRanking
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbYjjcCadreGrouping entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupingId(cursor.getInt(offset + 1));
        entity.setSchemeId(cursor.getInt(offset + 2));
        entity.setGroupingName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupingRanking(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbYjjcCadreGrouping entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbYjjcCadreGrouping entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbYjjcCadreGrouping entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
