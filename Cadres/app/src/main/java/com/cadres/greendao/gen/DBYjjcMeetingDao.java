package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBYjjcMeeting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBYJJC_MEETING".
*/
public class DBYjjcMeetingDao extends AbstractDao<DBYjjcMeeting, Long> {

    public static final String TABLENAME = "DBYJJC_MEETING";

    /**
     * Properties of entity DBYjjcMeeting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property MeetingId = new Property(1, int.class, "meetingId", false, "MEETING_ID");
        public final static Property SchemeId = new Property(2, int.class, "schemeId", false, "SCHEME_ID");
        public final static Property SchemeName = new Property(3, String.class, "schemeName", false, "SCHEME_NAME");
        public final static Property MeetingSummary = new Property(4, String.class, "meetingSummary", false, "MEETING_SUMMARY");
        public final static Property MeetingName = new Property(5, String.class, "meetingName", false, "MEETING_NAME");
        public final static Property MeetingType = new Property(6, String.class, "meetingType", false, "MEETING_TYPE");
        public final static Property MeetingTime = new Property(7, String.class, "meetingTime", false, "MEETING_TIME");
        public final static Property MeetingUser = new Property(8, String.class, "meetingUser", false, "MEETING_USER");
        public final static Property MeetingDescribe = new Property(9, String.class, "meetingDescribe", false, "MEETING_DESCRIBE");
        public final static Property MaterialFileName = new Property(10, String.class, "materialFileName", false, "MATERIAL_FILE_NAME");
    }


    public DBYjjcMeetingDao(DaoConfig config) {
        super(config);
    }
    
    public DBYjjcMeetingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBYJJC_MEETING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"MEETING_ID\" INTEGER NOT NULL ," + // 1: meetingId
                "\"SCHEME_ID\" INTEGER NOT NULL ," + // 2: schemeId
                "\"SCHEME_NAME\" TEXT," + // 3: schemeName
                "\"MEETING_SUMMARY\" TEXT," + // 4: meetingSummary
                "\"MEETING_NAME\" TEXT," + // 5: meetingName
                "\"MEETING_TYPE\" TEXT," + // 6: meetingType
                "\"MEETING_TIME\" TEXT," + // 7: meetingTime
                "\"MEETING_USER\" TEXT," + // 8: meetingUser
                "\"MEETING_DESCRIBE\" TEXT," + // 9: meetingDescribe
                "\"MATERIAL_FILE_NAME\" TEXT);"); // 10: materialFileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBYJJC_MEETING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBYjjcMeeting entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getMeetingId());
        stmt.bindLong(3, entity.getSchemeId());
 
        String schemeName = entity.getSchemeName();
        if (schemeName != null) {
            stmt.bindString(4, schemeName);
        }
 
        String meetingSummary = entity.getMeetingSummary();
        if (meetingSummary != null) {
            stmt.bindString(5, meetingSummary);
        }
 
        String meetingName = entity.getMeetingName();
        if (meetingName != null) {
            stmt.bindString(6, meetingName);
        }
 
        String meetingType = entity.getMeetingType();
        if (meetingType != null) {
            stmt.bindString(7, meetingType);
        }
 
        String meetingTime = entity.getMeetingTime();
        if (meetingTime != null) {
            stmt.bindString(8, meetingTime);
        }
 
        String meetingUser = entity.getMeetingUser();
        if (meetingUser != null) {
            stmt.bindString(9, meetingUser);
        }
 
        String meetingDescribe = entity.getMeetingDescribe();
        if (meetingDescribe != null) {
            stmt.bindString(10, meetingDescribe);
        }
 
        String materialFileName = entity.getMaterialFileName();
        if (materialFileName != null) {
            stmt.bindString(11, materialFileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBYjjcMeeting entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getMeetingId());
        stmt.bindLong(3, entity.getSchemeId());
 
        String schemeName = entity.getSchemeName();
        if (schemeName != null) {
            stmt.bindString(4, schemeName);
        }
 
        String meetingSummary = entity.getMeetingSummary();
        if (meetingSummary != null) {
            stmt.bindString(5, meetingSummary);
        }
 
        String meetingName = entity.getMeetingName();
        if (meetingName != null) {
            stmt.bindString(6, meetingName);
        }
 
        String meetingType = entity.getMeetingType();
        if (meetingType != null) {
            stmt.bindString(7, meetingType);
        }
 
        String meetingTime = entity.getMeetingTime();
        if (meetingTime != null) {
            stmt.bindString(8, meetingTime);
        }
 
        String meetingUser = entity.getMeetingUser();
        if (meetingUser != null) {
            stmt.bindString(9, meetingUser);
        }
 
        String meetingDescribe = entity.getMeetingDescribe();
        if (meetingDescribe != null) {
            stmt.bindString(10, meetingDescribe);
        }
 
        String materialFileName = entity.getMaterialFileName();
        if (materialFileName != null) {
            stmt.bindString(11, materialFileName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBYjjcMeeting readEntity(Cursor cursor, int offset) {
        DBYjjcMeeting entity = new DBYjjcMeeting( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // meetingId
            cursor.getInt(offset + 2), // schemeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // schemeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // meetingSummary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // meetingName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // meetingType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // meetingTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // meetingUser
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // meetingDescribe
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // materialFileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBYjjcMeeting entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeetingId(cursor.getInt(offset + 1));
        entity.setSchemeId(cursor.getInt(offset + 2));
        entity.setSchemeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMeetingSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMeetingName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMeetingType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMeetingTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMeetingUser(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMeetingDescribe(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaterialFileName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBYjjcMeeting entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBYjjcMeeting entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBYjjcMeeting entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
