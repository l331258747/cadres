package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGbCadreResumeListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGB_CADRE_RESUME_LIST_BEAN".
*/
public class DBGbCadreResumeListBeanDao extends AbstractDao<DBGbCadreResumeListBean, Long> {

    public static final String TABLENAME = "DBGB_CADRE_RESUME_LIST_BEAN";

    /**
     * Properties of entity DBGbCadreResumeListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property ResumeId = new Property(1, int.class, "resumeId", false, "RESUME_ID");
        public final static Property BaseId = new Property(2, int.class, "baseId", false, "BASE_ID");
        public final static Property CadreName = new Property(3, String.class, "cadreName", false, "CADRE_NAME");
        public final static Property WorkType = new Property(4, String.class, "workType", false, "WORK_TYPE");
        public final static Property WorkStartTime = new Property(5, String.class, "workStartTime", false, "WORK_START_TIME");
        public final static Property WorkEndTime = new Property(6, String.class, "workEndTime", false, "WORK_END_TIME");
        public final static Property WorkDescribe = new Property(7, String.class, "workDescribe", false, "WORK_DESCRIBE");
    }


    public DBGbCadreResumeListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBGbCadreResumeListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGB_CADRE_RESUME_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"RESUME_ID\" INTEGER NOT NULL ," + // 1: resumeId
                "\"BASE_ID\" INTEGER NOT NULL ," + // 2: baseId
                "\"CADRE_NAME\" TEXT," + // 3: cadreName
                "\"WORK_TYPE\" TEXT," + // 4: workType
                "\"WORK_START_TIME\" TEXT," + // 5: workStartTime
                "\"WORK_END_TIME\" TEXT," + // 6: workEndTime
                "\"WORK_DESCRIBE\" TEXT);"); // 7: workDescribe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGB_CADRE_RESUME_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGbCadreResumeListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getResumeId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String workType = entity.getWorkType();
        if (workType != null) {
            stmt.bindString(5, workType);
        }
 
        String workStartTime = entity.getWorkStartTime();
        if (workStartTime != null) {
            stmt.bindString(6, workStartTime);
        }
 
        String workEndTime = entity.getWorkEndTime();
        if (workEndTime != null) {
            stmt.bindString(7, workEndTime);
        }
 
        String workDescribe = entity.getWorkDescribe();
        if (workDescribe != null) {
            stmt.bindString(8, workDescribe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGbCadreResumeListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getResumeId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String workType = entity.getWorkType();
        if (workType != null) {
            stmt.bindString(5, workType);
        }
 
        String workStartTime = entity.getWorkStartTime();
        if (workStartTime != null) {
            stmt.bindString(6, workStartTime);
        }
 
        String workEndTime = entity.getWorkEndTime();
        if (workEndTime != null) {
            stmt.bindString(7, workEndTime);
        }
 
        String workDescribe = entity.getWorkDescribe();
        if (workDescribe != null) {
            stmt.bindString(8, workDescribe);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGbCadreResumeListBean readEntity(Cursor cursor, int offset) {
        DBGbCadreResumeListBean entity = new DBGbCadreResumeListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // resumeId
            cursor.getInt(offset + 2), // baseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cadreName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // workType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // workStartTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // workEndTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // workDescribe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGbCadreResumeListBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResumeId(cursor.getInt(offset + 1));
        entity.setBaseId(cursor.getInt(offset + 2));
        entity.setCadreName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWorkType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWorkStartTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWorkEndTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWorkDescribe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGbCadreResumeListBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGbCadreResumeListBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGbCadreResumeListBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
