package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBTyHj;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBTY_HJ".
*/
public class DBTyHjDao extends AbstractDao<DBTyHj, Long> {

    public static final String TABLENAME = "DBTY_HJ";

    /**
     * Properties of entity DBTyHj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Swbzcount = new Property(1, int.class, "swbzcount", false, "SWBZCOUNT");
        public final static Property Inconformityswbz = new Property(2, int.class, "inconformityswbz", false, "INCONFORMITYSWBZ");
        public final static Property Szfbzcount = new Property(3, int.class, "szfbzcount", false, "SZFBZCOUNT");
        public final static Property Inconformityszfbz = new Property(4, int.class, "inconformityszfbz", false, "INCONFORMITYSZFBZ");
        public final static Property Srdbzcount = new Property(5, int.class, "srdbzcount", false, "SRDBZCOUNT");
        public final static Property Inconformitysrdbz = new Property(6, int.class, "inconformitysrdbz", false, "INCONFORMITYSRDBZ");
        public final static Property Szxzcount = new Property(7, int.class, "szxzcount", false, "SZXZCOUNT");
        public final static Property Inconformityszx = new Property(8, int.class, "inconformityszx", false, "INCONFORMITYSZX");
    }


    public DBTyHjDao(DaoConfig config) {
        super(config);
    }
    
    public DBTyHjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBTY_HJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SWBZCOUNT\" INTEGER NOT NULL ," + // 1: swbzcount
                "\"INCONFORMITYSWBZ\" INTEGER NOT NULL ," + // 2: inconformityswbz
                "\"SZFBZCOUNT\" INTEGER NOT NULL ," + // 3: szfbzcount
                "\"INCONFORMITYSZFBZ\" INTEGER NOT NULL ," + // 4: inconformityszfbz
                "\"SRDBZCOUNT\" INTEGER NOT NULL ," + // 5: srdbzcount
                "\"INCONFORMITYSRDBZ\" INTEGER NOT NULL ," + // 6: inconformitysrdbz
                "\"SZXZCOUNT\" INTEGER NOT NULL ," + // 7: szxzcount
                "\"INCONFORMITYSZX\" INTEGER NOT NULL );"); // 8: inconformityszx
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBTY_HJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBTyHj entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getSwbzcount());
        stmt.bindLong(3, entity.getInconformityswbz());
        stmt.bindLong(4, entity.getSzfbzcount());
        stmt.bindLong(5, entity.getInconformityszfbz());
        stmt.bindLong(6, entity.getSrdbzcount());
        stmt.bindLong(7, entity.getInconformitysrdbz());
        stmt.bindLong(8, entity.getSzxzcount());
        stmt.bindLong(9, entity.getInconformityszx());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBTyHj entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getSwbzcount());
        stmt.bindLong(3, entity.getInconformityswbz());
        stmt.bindLong(4, entity.getSzfbzcount());
        stmt.bindLong(5, entity.getInconformityszfbz());
        stmt.bindLong(6, entity.getSrdbzcount());
        stmt.bindLong(7, entity.getInconformitysrdbz());
        stmt.bindLong(8, entity.getSzxzcount());
        stmt.bindLong(9, entity.getInconformityszx());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBTyHj readEntity(Cursor cursor, int offset) {
        DBTyHj entity = new DBTyHj( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // swbzcount
            cursor.getInt(offset + 2), // inconformityswbz
            cursor.getInt(offset + 3), // szfbzcount
            cursor.getInt(offset + 4), // inconformityszfbz
            cursor.getInt(offset + 5), // srdbzcount
            cursor.getInt(offset + 6), // inconformitysrdbz
            cursor.getInt(offset + 7), // szxzcount
            cursor.getInt(offset + 8) // inconformityszx
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBTyHj entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSwbzcount(cursor.getInt(offset + 1));
        entity.setInconformityswbz(cursor.getInt(offset + 2));
        entity.setSzfbzcount(cursor.getInt(offset + 3));
        entity.setInconformityszfbz(cursor.getInt(offset + 4));
        entity.setSrdbzcount(cursor.getInt(offset + 5));
        entity.setInconformitysrdbz(cursor.getInt(offset + 6));
        entity.setSzxzcount(cursor.getInt(offset + 7));
        entity.setInconformityszx(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBTyHj entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBTyHj entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBTyHj entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
