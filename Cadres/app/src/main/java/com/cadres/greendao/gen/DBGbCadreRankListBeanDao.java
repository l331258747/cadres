package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGbCadreRankListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGB_CADRE_RANK_LIST_BEAN".
*/
public class DBGbCadreRankListBeanDao extends AbstractDao<DBGbCadreRankListBean, Long> {

    public static final String TABLENAME = "DBGB_CADRE_RANK_LIST_BEAN";

    /**
     * Properties of entity DBGbCadreRankListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property RankId = new Property(1, int.class, "rankId", false, "RANK_ID");
        public final static Property BaseId = new Property(2, int.class, "baseId", false, "BASE_ID");
        public final static Property CadreName = new Property(3, String.class, "cadreName", false, "CADRE_NAME");
        public final static Property State = new Property(4, String.class, "state", false, "STATE");
        public final static Property DutiesRank = new Property(5, String.class, "dutiesRank", false, "DUTIES_RANK");
        public final static Property DutiesRankTime = new Property(6, String.class, "dutiesRankTime", false, "DUTIES_RANK_TIME");
        public final static Property TreatmentRank = new Property(7, String.class, "treatmentRank", false, "TREATMENT_RANK");
        public final static Property TreatmentRankTime = new Property(8, String.class, "treatmentRankTime", false, "TREATMENT_RANK_TIME");
    }


    public DBGbCadreRankListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBGbCadreRankListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGB_CADRE_RANK_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"RANK_ID\" INTEGER NOT NULL ," + // 1: rankId
                "\"BASE_ID\" INTEGER NOT NULL ," + // 2: baseId
                "\"CADRE_NAME\" TEXT," + // 3: cadreName
                "\"STATE\" TEXT," + // 4: state
                "\"DUTIES_RANK\" TEXT," + // 5: dutiesRank
                "\"DUTIES_RANK_TIME\" TEXT," + // 6: dutiesRankTime
                "\"TREATMENT_RANK\" TEXT," + // 7: treatmentRank
                "\"TREATMENT_RANK_TIME\" TEXT);"); // 8: treatmentRankTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGB_CADRE_RANK_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGbCadreRankListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getRankId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(5, state);
        }
 
        String dutiesRank = entity.getDutiesRank();
        if (dutiesRank != null) {
            stmt.bindString(6, dutiesRank);
        }
 
        String dutiesRankTime = entity.getDutiesRankTime();
        if (dutiesRankTime != null) {
            stmt.bindString(7, dutiesRankTime);
        }
 
        String treatmentRank = entity.getTreatmentRank();
        if (treatmentRank != null) {
            stmt.bindString(8, treatmentRank);
        }
 
        String treatmentRankTime = entity.getTreatmentRankTime();
        if (treatmentRankTime != null) {
            stmt.bindString(9, treatmentRankTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGbCadreRankListBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getRankId());
        stmt.bindLong(3, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(4, cadreName);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(5, state);
        }
 
        String dutiesRank = entity.getDutiesRank();
        if (dutiesRank != null) {
            stmt.bindString(6, dutiesRank);
        }
 
        String dutiesRankTime = entity.getDutiesRankTime();
        if (dutiesRankTime != null) {
            stmt.bindString(7, dutiesRankTime);
        }
 
        String treatmentRank = entity.getTreatmentRank();
        if (treatmentRank != null) {
            stmt.bindString(8, treatmentRank);
        }
 
        String treatmentRankTime = entity.getTreatmentRankTime();
        if (treatmentRankTime != null) {
            stmt.bindString(9, treatmentRankTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGbCadreRankListBean readEntity(Cursor cursor, int offset) {
        DBGbCadreRankListBean entity = new DBGbCadreRankListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // rankId
            cursor.getInt(offset + 2), // baseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cadreName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dutiesRank
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dutiesRankTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // treatmentRank
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // treatmentRankTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGbCadreRankListBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRankId(cursor.getInt(offset + 1));
        entity.setBaseId(cursor.getInt(offset + 2));
        entity.setCadreName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDutiesRank(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDutiesRankTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTreatmentRank(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTreatmentRankTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGbCadreRankListBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGbCadreRankListBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGbCadreRankListBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
