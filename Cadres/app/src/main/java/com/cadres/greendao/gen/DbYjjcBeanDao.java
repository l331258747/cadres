package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DbYjjcBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_YJJC_BEAN".
*/
public class DbYjjcBeanDao extends AbstractDao<DbYjjcBean, Long> {

    public static final String TABLENAME = "DB_YJJC_BEAN";

    /**
     * Properties of entity DbYjjcBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SchemeId = new Property(1, int.class, "schemeId", false, "SCHEME_ID");
        public final static Property SchemeName = new Property(2, String.class, "schemeName", false, "SCHEME_NAME");
        public final static Property SchemeTime = new Property(3, String.class, "schemeTime", false, "SCHEME_TIME");
        public final static Property SchemeDescribe = new Property(4, String.class, "schemeDescribe", false, "SCHEME_DESCRIBE");
    }


    public DbYjjcBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DbYjjcBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_YJJC_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SCHEME_ID\" INTEGER NOT NULL ," + // 1: schemeId
                "\"SCHEME_NAME\" TEXT," + // 2: schemeName
                "\"SCHEME_TIME\" TEXT," + // 3: schemeTime
                "\"SCHEME_DESCRIBE\" TEXT);"); // 4: schemeDescribe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_YJJC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbYjjcBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getSchemeId());
 
        String schemeName = entity.getSchemeName();
        if (schemeName != null) {
            stmt.bindString(3, schemeName);
        }
 
        String schemeTime = entity.getSchemeTime();
        if (schemeTime != null) {
            stmt.bindString(4, schemeTime);
        }
 
        String schemeDescribe = entity.getSchemeDescribe();
        if (schemeDescribe != null) {
            stmt.bindString(5, schemeDescribe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbYjjcBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getSchemeId());
 
        String schemeName = entity.getSchemeName();
        if (schemeName != null) {
            stmt.bindString(3, schemeName);
        }
 
        String schemeTime = entity.getSchemeTime();
        if (schemeTime != null) {
            stmt.bindString(4, schemeTime);
        }
 
        String schemeDescribe = entity.getSchemeDescribe();
        if (schemeDescribe != null) {
            stmt.bindString(5, schemeDescribe);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbYjjcBean readEntity(Cursor cursor, int offset) {
        DbYjjcBean entity = new DbYjjcBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // schemeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // schemeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // schemeTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // schemeDescribe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbYjjcBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSchemeId(cursor.getInt(offset + 1));
        entity.setSchemeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchemeTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSchemeDescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbYjjcBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbYjjcBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbYjjcBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
