package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBGwyFGDJ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGWY_FGDJ".
*/
public class DBGwyFGDJDao extends AbstractDao<DBGwyFGDJ, Long> {

    public static final String TABLENAME = "DBGWY_FGDJ";

    /**
     * Properties of entity DBGwyFGDJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DeptId = new Property(1, int.class, "deptId", false, "DEPT_ID");
        public final static Property DeptName = new Property(2, String.class, "deptName", false, "DEPT_NAME");
        public final static Property Subset = new Property(3, int.class, "subset", false, "SUBSET");
        public final static Property Display = new Property(4, int.class, "display", false, "DISPLAY");
        public final static Property GwyType = new Property(5, String.class, "gwyType", false, "GWY_TYPE");
        public final static Property Verificationsg = new Property(6, int.class, "verificationsg", false, "VERIFICATIONSG");
        public final static Property Verificationsig = new Property(7, int.class, "verificationsig", false, "VERIFICATIONSIG");
        public final static Property Actualsg = new Property(8, int.class, "actualsg", false, "ACTUALSG");
        public final static Property Actualsig = new Property(9, int.class, "actualsig", false, "ACTUALSIG");
        public final static Property Actualyj = new Property(10, int.class, "actualyj", false, "ACTUALYJ");
        public final static Property Actualej = new Property(11, int.class, "actualej", false, "ACTUALEJ");
        public final static Property Actualsj = new Property(12, int.class, "actualsj", false, "ACTUALSJ");
        public final static Property Actualsij = new Property(13, int.class, "actualsij", false, "ACTUALSIJ");
        public final static Property Actualwuj = new Property(14, int.class, "actualwuj", false, "ACTUALWUJ");
        public final static Property Surpasssg = new Property(15, int.class, "surpasssg", false, "SURPASSSG");
        public final static Property Surpasssig = new Property(16, int.class, "surpasssig", false, "SURPASSSIG");
        public final static Property Vacancysg = new Property(17, int.class, "vacancysg", false, "VACANCYSG");
        public final static Property Vacancysig = new Property(18, int.class, "vacancysig", false, "VACANCYSIG");
        public final static Property Surpass = new Property(19, String.class, "surpass", false, "SURPASS");
        public final static Property Lack = new Property(20, String.class, "lack", false, "LACK");
    }


    public DBGwyFGDJDao(DaoConfig config) {
        super(config);
    }
    
    public DBGwyFGDJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGWY_FGDJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEPT_ID\" INTEGER NOT NULL ," + // 1: deptId
                "\"DEPT_NAME\" TEXT," + // 2: deptName
                "\"SUBSET\" INTEGER NOT NULL ," + // 3: subset
                "\"DISPLAY\" INTEGER NOT NULL ," + // 4: display
                "\"GWY_TYPE\" TEXT," + // 5: gwyType
                "\"VERIFICATIONSG\" INTEGER NOT NULL ," + // 6: verificationsg
                "\"VERIFICATIONSIG\" INTEGER NOT NULL ," + // 7: verificationsig
                "\"ACTUALSG\" INTEGER NOT NULL ," + // 8: actualsg
                "\"ACTUALSIG\" INTEGER NOT NULL ," + // 9: actualsig
                "\"ACTUALYJ\" INTEGER NOT NULL ," + // 10: actualyj
                "\"ACTUALEJ\" INTEGER NOT NULL ," + // 11: actualej
                "\"ACTUALSJ\" INTEGER NOT NULL ," + // 12: actualsj
                "\"ACTUALSIJ\" INTEGER NOT NULL ," + // 13: actualsij
                "\"ACTUALWUJ\" INTEGER NOT NULL ," + // 14: actualwuj
                "\"SURPASSSG\" INTEGER NOT NULL ," + // 15: surpasssg
                "\"SURPASSSIG\" INTEGER NOT NULL ," + // 16: surpasssig
                "\"VACANCYSG\" INTEGER NOT NULL ," + // 17: vacancysg
                "\"VACANCYSIG\" INTEGER NOT NULL ," + // 18: vacancysig
                "\"SURPASS\" TEXT," + // 19: surpass
                "\"LACK\" TEXT);"); // 20: lack
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGWY_FGDJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBGwyFGDJ entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(3, deptName);
        }
        stmt.bindLong(4, entity.getSubset());
        stmt.bindLong(5, entity.getDisplay());
 
        String gwyType = entity.getGwyType();
        if (gwyType != null) {
            stmt.bindString(6, gwyType);
        }
        stmt.bindLong(7, entity.getVerificationsg());
        stmt.bindLong(8, entity.getVerificationsig());
        stmt.bindLong(9, entity.getActualsg());
        stmt.bindLong(10, entity.getActualsig());
        stmt.bindLong(11, entity.getActualyj());
        stmt.bindLong(12, entity.getActualej());
        stmt.bindLong(13, entity.getActualsj());
        stmt.bindLong(14, entity.getActualsij());
        stmt.bindLong(15, entity.getActualwuj());
        stmt.bindLong(16, entity.getSurpasssg());
        stmt.bindLong(17, entity.getSurpasssig());
        stmt.bindLong(18, entity.getVacancysg());
        stmt.bindLong(19, entity.getVacancysig());
 
        String surpass = entity.getSurpass();
        if (surpass != null) {
            stmt.bindString(20, surpass);
        }
 
        String lack = entity.getLack();
        if (lack != null) {
            stmt.bindString(21, lack);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBGwyFGDJ entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDeptId());
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(3, deptName);
        }
        stmt.bindLong(4, entity.getSubset());
        stmt.bindLong(5, entity.getDisplay());
 
        String gwyType = entity.getGwyType();
        if (gwyType != null) {
            stmt.bindString(6, gwyType);
        }
        stmt.bindLong(7, entity.getVerificationsg());
        stmt.bindLong(8, entity.getVerificationsig());
        stmt.bindLong(9, entity.getActualsg());
        stmt.bindLong(10, entity.getActualsig());
        stmt.bindLong(11, entity.getActualyj());
        stmt.bindLong(12, entity.getActualej());
        stmt.bindLong(13, entity.getActualsj());
        stmt.bindLong(14, entity.getActualsij());
        stmt.bindLong(15, entity.getActualwuj());
        stmt.bindLong(16, entity.getSurpasssg());
        stmt.bindLong(17, entity.getSurpasssig());
        stmt.bindLong(18, entity.getVacancysg());
        stmt.bindLong(19, entity.getVacancysig());
 
        String surpass = entity.getSurpass();
        if (surpass != null) {
            stmt.bindString(20, surpass);
        }
 
        String lack = entity.getLack();
        if (lack != null) {
            stmt.bindString(21, lack);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBGwyFGDJ readEntity(Cursor cursor, int offset) {
        DBGwyFGDJ entity = new DBGwyFGDJ( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // deptId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deptName
            cursor.getInt(offset + 3), // subset
            cursor.getInt(offset + 4), // display
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gwyType
            cursor.getInt(offset + 6), // verificationsg
            cursor.getInt(offset + 7), // verificationsig
            cursor.getInt(offset + 8), // actualsg
            cursor.getInt(offset + 9), // actualsig
            cursor.getInt(offset + 10), // actualyj
            cursor.getInt(offset + 11), // actualej
            cursor.getInt(offset + 12), // actualsj
            cursor.getInt(offset + 13), // actualsij
            cursor.getInt(offset + 14), // actualwuj
            cursor.getInt(offset + 15), // surpasssg
            cursor.getInt(offset + 16), // surpasssig
            cursor.getInt(offset + 17), // vacancysg
            cursor.getInt(offset + 18), // vacancysig
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // surpass
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // lack
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBGwyFGDJ entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptId(cursor.getInt(offset + 1));
        entity.setDeptName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubset(cursor.getInt(offset + 3));
        entity.setDisplay(cursor.getInt(offset + 4));
        entity.setGwyType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVerificationsg(cursor.getInt(offset + 6));
        entity.setVerificationsig(cursor.getInt(offset + 7));
        entity.setActualsg(cursor.getInt(offset + 8));
        entity.setActualsig(cursor.getInt(offset + 9));
        entity.setActualyj(cursor.getInt(offset + 10));
        entity.setActualej(cursor.getInt(offset + 11));
        entity.setActualsj(cursor.getInt(offset + 12));
        entity.setActualsij(cursor.getInt(offset + 13));
        entity.setActualwuj(cursor.getInt(offset + 14));
        entity.setSurpasssg(cursor.getInt(offset + 15));
        entity.setSurpasssig(cursor.getInt(offset + 16));
        entity.setVacancysg(cursor.getInt(offset + 17));
        entity.setVacancysig(cursor.getInt(offset + 18));
        entity.setSurpass(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLack(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBGwyFGDJ entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBGwyFGDJ entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBGwyFGDJ entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
