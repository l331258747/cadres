package com.cadres.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cadres.beanDB.DBYjjcCadre;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBYJJC_CADRE".
*/
public class DBYjjcCadreDao extends AbstractDao<DBYjjcCadre, Long> {

    public static final String TABLENAME = "DBYJJC_CADRE";

    /**
     * Properties of entity DBYjjcCadre.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DismissCadreId = new Property(1, int.class, "dismissCadreId", false, "DISMISS_CADRE_ID");
        public final static Property SchemeId = new Property(2, int.class, "schemeId", false, "SCHEME_ID");
        public final static Property SchemeName = new Property(3, String.class, "schemeName", false, "SCHEME_NAME");
        public final static Property BaseId = new Property(4, int.class, "baseId", false, "BASE_ID");
        public final static Property CadreName = new Property(5, String.class, "cadreName", false, "CADRE_NAME");
        public final static Property Gender = new Property(6, String.class, "gender", false, "GENDER");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Age = new Property(8, int.class, "age", false, "AGE");
        public final static Property JoinPartyDate = new Property(9, String.class, "joinPartyDate", false, "JOIN_PARTY_DATE");
        public final static Property CurrentPosition = new Property(10, String.class, "currentPosition", false, "CURRENT_POSITION");
        public final static Property CurrentPositionTime = new Property(11, String.class, "currentPositionTime", false, "CURRENT_POSITION_TIME");
        public final static Property NativePlace = new Property(12, String.class, "nativePlace", false, "NATIVE_PLACE");
        public final static Property FullTimeEducation = new Property(13, String.class, "fullTimeEducation", false, "FULL_TIME_EDUCATION");
        public final static Property CurrentEducation = new Property(14, String.class, "currentEducation", false, "CURRENT_EDUCATION");
        public final static Property AppointDismissType = new Property(15, String.class, "appointDismissType", false, "APPOINT_DISMISS_TYPE");
        public final static Property AppointPosition = new Property(16, int.class, "appointPosition", false, "APPOINT_POSITION");
        public final static Property AppointPositionName = new Property(17, String.class, "appointPositionName", false, "APPOINT_POSITION_NAME");
        public final static Property AppointDeptId = new Property(18, int.class, "appointDeptId", false, "APPOINT_DEPT_ID");
        public final static Property AppointDeptName = new Property(19, String.class, "appointDeptName", false, "APPOINT_DEPT_NAME");
        public final static Property PositionTime = new Property(20, String.class, "positionTime", false, "POSITION_TIME");
        public final static Property PositionReason = new Property(21, String.class, "positionReason", false, "POSITION_REASON");
        public final static Property PositionFileNumber = new Property(22, String.class, "positionFileNumber", false, "POSITION_FILE_NUMBER");
        public final static Property DismissPosition = new Property(23, String.class, "dismissPosition", false, "DISMISS_POSITION");
        public final static Property DismissPositionName = new Property(24, String.class, "dismissPositionName", false, "DISMISS_POSITION_NAME");
        public final static Property DismissDeptId = new Property(25, String.class, "dismissDeptId", false, "DISMISS_DEPT_ID");
        public final static Property DismissDeptName = new Property(26, String.class, "dismissDeptName", false, "DISMISS_DEPT_NAME");
        public final static Property LeaveTime = new Property(27, String.class, "leaveTime", false, "LEAVE_TIME");
        public final static Property LeaveReason = new Property(28, String.class, "leaveReason", false, "LEAVE_REASON");
        public final static Property LeaveFileNumber = new Property(29, String.class, "leaveFileNumber", false, "LEAVE_FILE_NUMBER");
        public final static Property CurrentRank = new Property(30, String.class, "currentRank", false, "CURRENT_RANK");
        public final static Property AppointDismissResult = new Property(31, String.class, "appointDismissResult", false, "APPOINT_DISMISS_RESULT");
        public final static Property MeetingDescribe = new Property(32, String.class, "meetingDescribe", false, "MEETING_DESCRIBE");
        public final static Property TalkNumber = new Property(33, int.class, "talkNumber", false, "TALK_NUMBER");
        public final static Property RecommendNumber = new Property(34, int.class, "recommendNumber", false, "RECOMMEND_NUMBER");
        public final static Property Ranking = new Property(35, int.class, "ranking", false, "RANKING");
        public final static Property VacantPosition = new Property(36, String.class, "vacantPosition", false, "VACANT_POSITION");
        public final static Property ValidTicket = new Property(37, int.class, "validTicket", false, "VALID_TICKET");
        public final static Property GainVotes = new Property(38, int.class, "gainVotes", false, "GAIN_VOTES");
        public final static Property InspectFileName = new Property(39, String.class, "inspectFileName", false, "INSPECT_FILE_NAME");
    }


    public DBYjjcCadreDao(DaoConfig config) {
        super(config);
    }
    
    public DBYjjcCadreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBYJJC_CADRE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DISMISS_CADRE_ID\" INTEGER NOT NULL ," + // 1: dismissCadreId
                "\"SCHEME_ID\" INTEGER NOT NULL ," + // 2: schemeId
                "\"SCHEME_NAME\" TEXT," + // 3: schemeName
                "\"BASE_ID\" INTEGER NOT NULL ," + // 4: baseId
                "\"CADRE_NAME\" TEXT," + // 5: cadreName
                "\"GENDER\" TEXT," + // 6: gender
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"AGE\" INTEGER NOT NULL ," + // 8: age
                "\"JOIN_PARTY_DATE\" TEXT," + // 9: joinPartyDate
                "\"CURRENT_POSITION\" TEXT," + // 10: currentPosition
                "\"CURRENT_POSITION_TIME\" TEXT," + // 11: currentPositionTime
                "\"NATIVE_PLACE\" TEXT," + // 12: nativePlace
                "\"FULL_TIME_EDUCATION\" TEXT," + // 13: fullTimeEducation
                "\"CURRENT_EDUCATION\" TEXT," + // 14: currentEducation
                "\"APPOINT_DISMISS_TYPE\" TEXT," + // 15: appointDismissType
                "\"APPOINT_POSITION\" INTEGER NOT NULL ," + // 16: appointPosition
                "\"APPOINT_POSITION_NAME\" TEXT," + // 17: appointPositionName
                "\"APPOINT_DEPT_ID\" INTEGER NOT NULL ," + // 18: appointDeptId
                "\"APPOINT_DEPT_NAME\" TEXT," + // 19: appointDeptName
                "\"POSITION_TIME\" TEXT," + // 20: positionTime
                "\"POSITION_REASON\" TEXT," + // 21: positionReason
                "\"POSITION_FILE_NUMBER\" TEXT," + // 22: positionFileNumber
                "\"DISMISS_POSITION\" TEXT," + // 23: dismissPosition
                "\"DISMISS_POSITION_NAME\" TEXT," + // 24: dismissPositionName
                "\"DISMISS_DEPT_ID\" TEXT," + // 25: dismissDeptId
                "\"DISMISS_DEPT_NAME\" TEXT," + // 26: dismissDeptName
                "\"LEAVE_TIME\" TEXT," + // 27: leaveTime
                "\"LEAVE_REASON\" TEXT," + // 28: leaveReason
                "\"LEAVE_FILE_NUMBER\" TEXT," + // 29: leaveFileNumber
                "\"CURRENT_RANK\" TEXT," + // 30: currentRank
                "\"APPOINT_DISMISS_RESULT\" TEXT," + // 31: appointDismissResult
                "\"MEETING_DESCRIBE\" TEXT," + // 32: meetingDescribe
                "\"TALK_NUMBER\" INTEGER NOT NULL ," + // 33: talkNumber
                "\"RECOMMEND_NUMBER\" INTEGER NOT NULL ," + // 34: recommendNumber
                "\"RANKING\" INTEGER NOT NULL ," + // 35: ranking
                "\"VACANT_POSITION\" TEXT," + // 36: vacantPosition
                "\"VALID_TICKET\" INTEGER NOT NULL ," + // 37: validTicket
                "\"GAIN_VOTES\" INTEGER NOT NULL ," + // 38: gainVotes
                "\"INSPECT_FILE_NAME\" TEXT);"); // 39: inspectFileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBYJJC_CADRE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBYjjcCadre entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDismissCadreId());
        stmt.bindLong(3, entity.getSchemeId());
 
        String schemeName = entity.getSchemeName();
        if (schemeName != null) {
            stmt.bindString(4, schemeName);
        }
        stmt.bindLong(5, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(6, cadreName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getAge());
 
        String joinPartyDate = entity.getJoinPartyDate();
        if (joinPartyDate != null) {
            stmt.bindString(10, joinPartyDate);
        }
 
        String currentPosition = entity.getCurrentPosition();
        if (currentPosition != null) {
            stmt.bindString(11, currentPosition);
        }
 
        String currentPositionTime = entity.getCurrentPositionTime();
        if (currentPositionTime != null) {
            stmt.bindString(12, currentPositionTime);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(13, nativePlace);
        }
 
        String fullTimeEducation = entity.getFullTimeEducation();
        if (fullTimeEducation != null) {
            stmt.bindString(14, fullTimeEducation);
        }
 
        String currentEducation = entity.getCurrentEducation();
        if (currentEducation != null) {
            stmt.bindString(15, currentEducation);
        }
 
        String appointDismissType = entity.getAppointDismissType();
        if (appointDismissType != null) {
            stmt.bindString(16, appointDismissType);
        }
        stmt.bindLong(17, entity.getAppointPosition());
 
        String appointPositionName = entity.getAppointPositionName();
        if (appointPositionName != null) {
            stmt.bindString(18, appointPositionName);
        }
        stmt.bindLong(19, entity.getAppointDeptId());
 
        String appointDeptName = entity.getAppointDeptName();
        if (appointDeptName != null) {
            stmt.bindString(20, appointDeptName);
        }
 
        String positionTime = entity.getPositionTime();
        if (positionTime != null) {
            stmt.bindString(21, positionTime);
        }
 
        String positionReason = entity.getPositionReason();
        if (positionReason != null) {
            stmt.bindString(22, positionReason);
        }
 
        String positionFileNumber = entity.getPositionFileNumber();
        if (positionFileNumber != null) {
            stmt.bindString(23, positionFileNumber);
        }
 
        String dismissPosition = entity.getDismissPosition();
        if (dismissPosition != null) {
            stmt.bindString(24, dismissPosition);
        }
 
        String dismissPositionName = entity.getDismissPositionName();
        if (dismissPositionName != null) {
            stmt.bindString(25, dismissPositionName);
        }
 
        String dismissDeptId = entity.getDismissDeptId();
        if (dismissDeptId != null) {
            stmt.bindString(26, dismissDeptId);
        }
 
        String dismissDeptName = entity.getDismissDeptName();
        if (dismissDeptName != null) {
            stmt.bindString(27, dismissDeptName);
        }
 
        String leaveTime = entity.getLeaveTime();
        if (leaveTime != null) {
            stmt.bindString(28, leaveTime);
        }
 
        String leaveReason = entity.getLeaveReason();
        if (leaveReason != null) {
            stmt.bindString(29, leaveReason);
        }
 
        String leaveFileNumber = entity.getLeaveFileNumber();
        if (leaveFileNumber != null) {
            stmt.bindString(30, leaveFileNumber);
        }
 
        String currentRank = entity.getCurrentRank();
        if (currentRank != null) {
            stmt.bindString(31, currentRank);
        }
 
        String appointDismissResult = entity.getAppointDismissResult();
        if (appointDismissResult != null) {
            stmt.bindString(32, appointDismissResult);
        }
 
        String meetingDescribe = entity.getMeetingDescribe();
        if (meetingDescribe != null) {
            stmt.bindString(33, meetingDescribe);
        }
        stmt.bindLong(34, entity.getTalkNumber());
        stmt.bindLong(35, entity.getRecommendNumber());
        stmt.bindLong(36, entity.getRanking());
 
        String vacantPosition = entity.getVacantPosition();
        if (vacantPosition != null) {
            stmt.bindString(37, vacantPosition);
        }
        stmt.bindLong(38, entity.getValidTicket());
        stmt.bindLong(39, entity.getGainVotes());
 
        String inspectFileName = entity.getInspectFileName();
        if (inspectFileName != null) {
            stmt.bindString(40, inspectFileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBYjjcCadre entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getDismissCadreId());
        stmt.bindLong(3, entity.getSchemeId());
 
        String schemeName = entity.getSchemeName();
        if (schemeName != null) {
            stmt.bindString(4, schemeName);
        }
        stmt.bindLong(5, entity.getBaseId());
 
        String cadreName = entity.getCadreName();
        if (cadreName != null) {
            stmt.bindString(6, cadreName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getAge());
 
        String joinPartyDate = entity.getJoinPartyDate();
        if (joinPartyDate != null) {
            stmt.bindString(10, joinPartyDate);
        }
 
        String currentPosition = entity.getCurrentPosition();
        if (currentPosition != null) {
            stmt.bindString(11, currentPosition);
        }
 
        String currentPositionTime = entity.getCurrentPositionTime();
        if (currentPositionTime != null) {
            stmt.bindString(12, currentPositionTime);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(13, nativePlace);
        }
 
        String fullTimeEducation = entity.getFullTimeEducation();
        if (fullTimeEducation != null) {
            stmt.bindString(14, fullTimeEducation);
        }
 
        String currentEducation = entity.getCurrentEducation();
        if (currentEducation != null) {
            stmt.bindString(15, currentEducation);
        }
 
        String appointDismissType = entity.getAppointDismissType();
        if (appointDismissType != null) {
            stmt.bindString(16, appointDismissType);
        }
        stmt.bindLong(17, entity.getAppointPosition());
 
        String appointPositionName = entity.getAppointPositionName();
        if (appointPositionName != null) {
            stmt.bindString(18, appointPositionName);
        }
        stmt.bindLong(19, entity.getAppointDeptId());
 
        String appointDeptName = entity.getAppointDeptName();
        if (appointDeptName != null) {
            stmt.bindString(20, appointDeptName);
        }
 
        String positionTime = entity.getPositionTime();
        if (positionTime != null) {
            stmt.bindString(21, positionTime);
        }
 
        String positionReason = entity.getPositionReason();
        if (positionReason != null) {
            stmt.bindString(22, positionReason);
        }
 
        String positionFileNumber = entity.getPositionFileNumber();
        if (positionFileNumber != null) {
            stmt.bindString(23, positionFileNumber);
        }
 
        String dismissPosition = entity.getDismissPosition();
        if (dismissPosition != null) {
            stmt.bindString(24, dismissPosition);
        }
 
        String dismissPositionName = entity.getDismissPositionName();
        if (dismissPositionName != null) {
            stmt.bindString(25, dismissPositionName);
        }
 
        String dismissDeptId = entity.getDismissDeptId();
        if (dismissDeptId != null) {
            stmt.bindString(26, dismissDeptId);
        }
 
        String dismissDeptName = entity.getDismissDeptName();
        if (dismissDeptName != null) {
            stmt.bindString(27, dismissDeptName);
        }
 
        String leaveTime = entity.getLeaveTime();
        if (leaveTime != null) {
            stmt.bindString(28, leaveTime);
        }
 
        String leaveReason = entity.getLeaveReason();
        if (leaveReason != null) {
            stmt.bindString(29, leaveReason);
        }
 
        String leaveFileNumber = entity.getLeaveFileNumber();
        if (leaveFileNumber != null) {
            stmt.bindString(30, leaveFileNumber);
        }
 
        String currentRank = entity.getCurrentRank();
        if (currentRank != null) {
            stmt.bindString(31, currentRank);
        }
 
        String appointDismissResult = entity.getAppointDismissResult();
        if (appointDismissResult != null) {
            stmt.bindString(32, appointDismissResult);
        }
 
        String meetingDescribe = entity.getMeetingDescribe();
        if (meetingDescribe != null) {
            stmt.bindString(33, meetingDescribe);
        }
        stmt.bindLong(34, entity.getTalkNumber());
        stmt.bindLong(35, entity.getRecommendNumber());
        stmt.bindLong(36, entity.getRanking());
 
        String vacantPosition = entity.getVacantPosition();
        if (vacantPosition != null) {
            stmt.bindString(37, vacantPosition);
        }
        stmt.bindLong(38, entity.getValidTicket());
        stmt.bindLong(39, entity.getGainVotes());
 
        String inspectFileName = entity.getInspectFileName();
        if (inspectFileName != null) {
            stmt.bindString(40, inspectFileName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBYjjcCadre readEntity(Cursor cursor, int offset) {
        DBYjjcCadre entity = new DBYjjcCadre( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // dismissCadreId
            cursor.getInt(offset + 2), // schemeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // schemeName
            cursor.getInt(offset + 4), // baseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cadreName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.getInt(offset + 8), // age
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // joinPartyDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // currentPosition
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // currentPositionTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // nativePlace
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fullTimeEducation
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // currentEducation
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // appointDismissType
            cursor.getInt(offset + 16), // appointPosition
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // appointPositionName
            cursor.getInt(offset + 18), // appointDeptId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // appointDeptName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // positionTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // positionReason
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // positionFileNumber
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // dismissPosition
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // dismissPositionName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // dismissDeptId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // dismissDeptName
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // leaveTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // leaveReason
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // leaveFileNumber
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // currentRank
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // appointDismissResult
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // meetingDescribe
            cursor.getInt(offset + 33), // talkNumber
            cursor.getInt(offset + 34), // recommendNumber
            cursor.getInt(offset + 35), // ranking
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // vacantPosition
            cursor.getInt(offset + 37), // validTicket
            cursor.getInt(offset + 38), // gainVotes
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // inspectFileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBYjjcCadre entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDismissCadreId(cursor.getInt(offset + 1));
        entity.setSchemeId(cursor.getInt(offset + 2));
        entity.setSchemeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBaseId(cursor.getInt(offset + 4));
        entity.setCadreName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.getInt(offset + 8));
        entity.setJoinPartyDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCurrentPosition(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCurrentPositionTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNativePlace(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFullTimeEducation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCurrentEducation(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAppointDismissType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAppointPosition(cursor.getInt(offset + 16));
        entity.setAppointPositionName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAppointDeptId(cursor.getInt(offset + 18));
        entity.setAppointDeptName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPositionTime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPositionReason(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPositionFileNumber(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDismissPosition(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDismissPositionName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDismissDeptId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDismissDeptName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLeaveTime(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLeaveReason(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setLeaveFileNumber(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCurrentRank(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAppointDismissResult(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMeetingDescribe(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setTalkNumber(cursor.getInt(offset + 33));
        entity.setRecommendNumber(cursor.getInt(offset + 34));
        entity.setRanking(cursor.getInt(offset + 35));
        entity.setVacantPosition(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setValidTicket(cursor.getInt(offset + 37));
        entity.setGainVotes(cursor.getInt(offset + 38));
        entity.setInspectFileName(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBYjjcCadre entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBYjjcCadre entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBYjjcCadre entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
